CREATE OR REPLACE PROCEDURE SP_MACRO_LOANS
IS
   W_MIG_DATE   DATE;
   W_BRN_CODE   NUMBER (5);
   W_ROWCOUNT   NUMBER := 0;
BEGIN
   DELETE FROM ERRORLOG
         WHERE TEMPLATE_NAME = 'LOANS';

   COMMIT;

   SELECT DISTINCT ACOP_BRANCH_CODE INTO W_BRN_CODE FROM MIG_ACOP_BAL;

   SELECT DISTINCT ACOP_BAL_DATE INTO W_MIG_DATE FROM MIG_ACOP_BAL;


   UPDATE MIG_LNACDSDTL
      SET LNACDSDTL_DISB_AMOUNT = ROUND (LNACDSDTL_DISB_AMOUNT, 0);

   UPDATE MIG_LNACRSDTL
      SET LNACRSDTL_REPAY_AMT = ROUND (LNACRSDTL_REPAY_AMT, 0);



   BEGIN
      SP_LNACNT_VALIDATE (W_BRN_CODE, W_MIG_DATE);
   END;

   BEGIN
      SP_LNACIRS_VALIDATE (W_BRN_CODE, W_MIG_DATE);
   END;

   BEGIN
      SP_ASSETCLS_VALIDATE (W_BRN_CODE, W_MIG_DATE);
   END;

   BEGIN
      SP_LNACDSDTL_VALIDATE (W_BRN_CODE, W_MIG_DATE);
   END;

   BEGIN
      SP_LNACRSDTL_VALIDATE (W_BRN_CODE, W_MIG_DATE);
   END;

   BEGIN
      SP_LNSUSP_VALIDATE (W_BRN_CODE, W_MIG_DATE);
   END;

   BEGIN
      SP_LNACGUAR_VALIDATE (W_BRN_CODE, W_MIG_DATE);
   END;

   BEGIN
      SP_LN_INT_APPLIED_UPTO (W_MIG_DATE);
   END;

   ---  checking lnacnt applied upto date if not equal to asnt interest dbcr upto

   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_ACNTS A, MIG_LNACNT L
    WHERE     L.LNACNT_ACNUM = A.ACNTS_ACNUM
          AND L.LNACNT_INT_APPLIED_UPTO_DATE <> A.ACNTS_INT_DBCR_UPTO;

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'LNACNT_INT_APPLIED_UPTO_DATE',
                     W_ROWCOUNT,
                     'LNACNT_INT_APPLIED_UPTO_DATE SHOULD BE EQUAL TO ACNTS_INT_DBCR_UPTO',
                     'SELECT A.ACNTS_ACNUM,
       L.LNACNT_INT_APPLIED_UPTO_DATE,
       L.LNACNT_DATE_OF_NPA,
       A.ACNTS_INT_DBCR_UPTO,
       A.ACNTS_INT_ACCR_UPTO,
       L.LNACNT_ASSET_STAT
  FROM MIG_ACNTS A, MIG_LNACNT L
 WHERE L.LNACNT_ACNUM = A.ACNTS_ACNUM
   AND L.LNACNT_INT_APPLIED_UPTO_DATE <> A.ACNTS_INT_DBCR_UPTO;');
   END IF;

   --- Repayment effective date must not be less than  loan sanction date

   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_LNACRSDTL, MIG_LNACNT
    WHERE     MIG_LNACNT.LNACNT_ACNUM = MIG_LNACRSDTL.LNACRSDTL_ACNUM
          AND MIG_LNACRSDTL.LNACRS_EFF_DATE <
                 MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE;

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'LNACRS_EFF_DATE',
                     W_ROWCOUNT,
                     'REPAYMENT EFFECTIVE DATE MUST NOT BE LESS THAN  LOAN SANCTION DATE',
                     'SELECT MIG_LNACNT.LNACNT_ACNUM,
       A.ACNTS_AC_TYPE,
       A.ACNTS_OPENING_DATE,
       MIG_LNACRSDTL.LNACRS_EFF_DATE,
       MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE
  FROM MIG_LNACRSDTL, MIG_LNACNT, MIG_ACNTS A
 WHERE MIG_LNACNT.LNACNT_ACNUM = MIG_LNACRSDTL.LNACRSDTL_ACNUM
   AND MIG_LNACRSDTL.LNACRS_EFF_DATE <
       MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE
   AND A.ACNTS_ACNUM = MIG_LNACNT.LNACNT_ACNUM;');
   END IF;

   ------- sanction date must not be greater then account open date

   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_ACNTS, MIG_LNACNT
    WHERE     MIG_ACNTS.ACNTS_ACNUM = MIG_LNACNT.LNACNT_ACNUM
          AND MIG_ACNTS.ACNTS_OPENING_DATE <
                 MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE;

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'LNACNT_LIMIT_SANCTION_DATE',
                     W_ROWCOUNT,
                     'SANCTION DATE MUST NOT BE GREATER THAN ACCOUNT OPEN DATE',
                     'SELECT MIG_ACNTS.ACNTS_ACNUM,
       MIG_ACNTS.ACNTS_OPENING_DATE,
       MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE
  FROM MIG_LNACNT, MIG_ACNTS
 WHERE MIG_ACNTS.ACNTS_ACNUM = MIG_LNACNT.LNACNT_ACNUM
   AND MIG_ACNTS.ACNTS_OPENING_DATE < MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE;');
   END IF;

   ------- mis match of sanction date

   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_LNACRSDTL, MIG_LNACNT
    WHERE     MIG_LNACRSDTL.LNACRSDTL_ACNUM = MIG_LNACNT.LNACNT_ACNUM
          AND MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE <>
                 MIG_LNACRSDTL.LNACRS_SANC_DATE;

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'LNACRS_SANC_DATE',
                     W_ROWCOUNT,
                     'SANCTION DATE MISMATCH IN LNACNT AND LNACRSDTL',
                     'SELECT MIG_LNACNT.LNACNT_ACNUM, MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE,
       MIG_LNACRSDTL.LNACRS_SANC_DATE
  FROM MIG_LNACRSDTL, MIG_LNACNT
 WHERE MIG_LNACRSDTL.LNACRSDTL_ACNUM = MIG_LNACNT.LNACNT_ACNUM
   AND MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE <>
       MIG_LNACRSDTL.LNACRS_SANC_DATE;');
   END IF;

   ----- Accru date mismatch in accounts and loans   ------

   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_ACNTS, MIG_LNACNT
    WHERE     MIG_ACNTS.ACNTS_ACNUM = MIG_LNACNT.LNACNT_ACNUM
          AND ACNTS_INT_ACCR_UPTO <> LNACNT_INT_ACCR_UPTO;

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES ('LOANS',
                   'LNACNT_INT_ACCR_UPTO',
                   W_ROWCOUNT,
                   ' ACCRU DATE MISMATCH IN ACCOUNTS AND LOANS',
                   'SELECT MIG_ACNTS.ACNTS_ACNUM,
       MIG_ACNTS.ACNTS_AC_TYPE,
       MIG_ACNTS.ACNTS_OPENING_DATE,
       MIG_LNACNT.LNACNT_INT_APPLIED_UPTO_DATE,
       ACNTS_INT_ACCR_UPTO,
       LNACNT_INT_ACCR_UPTO,
       MIG_LNACNT.LNACNT_LIMIT_SANCTION_DATE,
       MIG_LNACNT.LNACNT_ASSET_STAT
  FROM MIG_ACNTS, MIG_LNACNT
 WHERE MIG_ACNTS.ACNTS_ACNUM = MIG_LNACNT.LNACNT_ACNUM
   AND ACNTS_INT_ACCR_UPTO <> LNACNT_INT_ACCR_UPTO;');
   END IF;

   ----CL Code mismatch check

   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_ACNTS A, MIG_LNACNT L, LNMISMAPPM LL
    WHERE     A.ACNTS_ACNUM = L.LNACNT_ACNUM
          AND A.ACNTS_PROD_CODE = LL.LNMISMAPPM_PRODUCT_CODE
          AND (A.ACNTS_PROD_CODE, L.LNACNT_HO_DEPT_CODE) NOT IN
                 (SELECT LNMISMAPPM.LNMISMAPPM_PRODUCT_CODE,
                         LNMISMAPPM.LNMISMAPPM_CL_CODE
                    FROM LNMISMAPPM
                   WHERE LNMISMAPPM_CL_CODE IS NOT NULL);

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'CL_CODE',
                     W_ROWCOUNT,
                     ' CL CODE  MISMATCH IN   LOANS',
                     ' SELECT L.LNACNT_ACNUM,A.ACNTS_PROD_CODE , LL.LNMISMAPPM_CL_CODE
FROM MIG_ACNTS A, MIG_LNACNT L, LNMISMAPPM LL
WHERE A.ACNTS_ACNUM=L.LNACNT_ACNUM
AND A.ACNTS_PROD_CODE=LL.LNMISMAPPM_PRODUCT_CODE
AND (A.ACNTS_PROD_CODE, L.LNACNT_HO_DEPT_CODE) NOT IN (SELECT LNMISMAPPM.LNMISMAPPM_PRODUCT_CODE, LNMISMAPPM.LNMISMAPPM_CL_CODE FROM LNMISMAPPM 
 WHERE LNMISMAPPM_CL_CODE IS NOT NULL);
 
 
 
------------------------- UPDATE ----------------------------- 

BEGIN
   FOR IDX
      IN (SELECT L.LNACNT_ACNUM,
                 A.ACNTS_PROD_CODE,
                 LL.LNMISMAPPM_CL_CODE,
                 L.LNACNT_HO_DEPT_CODE
            FROM MIG_ACNTS A, MIG_LNACNT L, LNMISMAPPM LL
           WHERE     A.ACNTS_ACNUM = L.LNACNT_ACNUM
                 AND A.ACNTS_PROD_CODE = LL.LNMISMAPPM_PRODUCT_CODE
                 AND (A.ACNTS_PROD_CODE, L.LNACNT_HO_DEPT_CODE) NOT IN
                        (SELECT LNMISMAPPM.LNMISMAPPM_PRODUCT_CODE,
                                LNMISMAPPM.LNMISMAPPM_CL_CODE
                           FROM LNMISMAPPM
                          WHERE LNMISMAPPM_CL_CODE IS NOT NULL)
                 AND LL.LNMISMAPPM_CL_CODE IS NOT NULL)
   LOOP
      UPDATE MIG_LNACNT
         SET LNACNT_HO_DEPT_CODE = IDX.LNMISMAPPM_CL_CODE
       WHERE LNACNT_ACNUM = IDX.LNACNT_ACNUM;
   END LOOP;
END;
 
 
 ');
   END IF;

   --SME CODE MISMATCH
   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_ACNTS A, MIG_LNACNT L, LNMISMAPPM LL
    WHERE     A.ACNTS_ACNUM = L.LNACNT_ACNUM
          AND A.ACNTS_PROD_CODE = LL.LNMISMAPPM_PRODUCT_CODE
          AND (A.ACNTS_PROD_CODE, L.LNACNT_BSR_ACT_OCC_CODE) NOT IN
                 (SELECT LNMISMAPPM.LNMISMAPPM_PRODUCT_CODE,
                         LNMISMAPPM.LNMISMAPPM_SME_NONSME_CODE
                    FROM LNMISMAPPM
                   WHERE LNMISMAPPM_SME_NONSME_CODE IS NOT NULL);

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'SME_NONSME CODE ',
                     W_ROWCOUNT,
                     ' SME_NONSME  CODE  MISMATCH IN   LOANS',
                     'SELECT L.LNACNT_ACNUM,L.LNACNT_BSR_ACT_OCC_CODE
FROM MIG_ACNTS A, MIG_LNACNT L, LNMISMAPPM LL
WHERE A.ACNTS_ACNUM=L.LNACNT_ACNUM
AND A.ACNTS_PROD_CODE=LL.LNMISMAPPM_PRODUCT_CODE
AND (A.ACNTS_PROD_CODE, L.LNACNT_BSR_ACT_OCC_CODE) NOT IN 
(SELECT LNMISMAPPM.LNMISMAPPM_PRODUCT_CODE, LNMISMAPPM.LNMISMAPPM_SME_NONSME_CODE FROM LNMISMAPPM 
 WHERE LNMISMAPPM_SME_NONSME_CODE IS NOT NULL;');
   END IF;

   --- SECURITY CODE MISMATCH
   SELECT COUNT (*)
     INTO W_ROWCOUNT
     FROM MIG_ACNTS A, MIG_SEC_REGIS_TEMP S, LNMISMAPPM LL
    WHERE     A.ACNTS_CLIENT_NUM = S.SECRCPT_CLIENT_NUM
          AND A.ACNTS_PROD_CODE = LL.LNMISMAPPM_PRODUCT_CODE
          AND (A.ACNTS_PROD_CODE, S.SECRCPT_SEC_TYPE) NOT IN
                 (SELECT LNMISMAPPM.LNMISMAPPM_PRODUCT_CODE,
                         LNMISMAPPM.LNMISMAPPM_SECURITY_CODE
                    FROM LNMISMAPPM
                   WHERE LNMISMAPPM.LNMISMAPPM_SECURITY_CODE IS NOT NULL);

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'SECURITY CODE ',
                     W_ROWCOUNT,
                     ' SECURITY  CODE  MISMATCH IN   LOANS',
                     'SELECT DISTINCT A.ACNTS_PROD_CODE, A.ACNTS_ACNUM,S.SECRCPT_SEC_TYPE
FROM MIG_ACNTS A, MIG_SEC_REGIS_TEMP S, LNMISMAPPM LL
WHERE A.ACNTS_CLIENT_NUM=S.SECRCPT_CLIENT_NUM
AND A.ACNTS_PROD_CODE=LL.LNMISMAPPM_PRODUCT_CODE
AND (A.ACNTS_PROD_CODE, S.SECRCPT_SEC_TYPE) NOT IN 
(SELECT LNMISMAPPM.LNMISMAPPM_PRODUCT_CODE, LNMISMAPPM.LNMISMAPPM_SECURITY_CODE FROM LNMISMAPPM 
 WHERE LNMISMAPPM_SECURITY_CODE IS NOT NULL);');
   END IF;
------
SELECT COUNT(*) INTO W_ROWCOUNT
FROM 
LNPRODPM,
MIG_LNACNT,
MIG_ACNTS,MIG_LNACRSDTL_TEMP
WHERE LNPRD_PROD_CODE=ACNTS_PROD_CODE
AND LNACNT_ACNUM=ACNTS_ACNUM
AND LNACNT_ACNUM=LNACRSDTL_ACNUM
AND LNPRD_SHORT_TERM_LOAN=1
AND LNACNT_ASSET_STAT<>'ST';

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'LNACNT_ASSET_STAT',
                     W_ROWCOUNT,
                     ' ASSET CODE  MISMATCH IN  LOANS',
                     'SELECT  LNACNT_ACNUM,LNACNT_ASSET_STAT,''ST'' SHOULD_BE
FROM 
LNPRODPM,
MIG_LNACNT,
MIG_ACNTS,MIG_LNACRSDTL_TEMP
WHERE LNPRD_PROD_CODE=ACNTS_PROD_CODE
AND LNACNT_ACNUM=ACNTS_ACNUM
AND LNACNT_ACNUM=LNACRSDTL_ACNUM
AND LNPRD_SHORT_TERM_LOAN=1
AND LNACNT_ASSET_STAT<>''ST'';');
   END IF;
   
   ------PROBLEN WITH REPAYMENT ON AMOUNT
   /*
SELECT COUNT (*)
  INTO W_ROWCOUNT
  FROM MIG_LNACRSDTL
 WHERE LNACRSDTL_REPAY_AMT * LNACRSDTL_NUM_OF_INSTALLMENT <>
          LNACRS_REPH_ON_AMT;

   IF W_ROWCOUNT > 0
   THEN
      INSERT INTO ERRORLOG (TEMPLATE_NAME,
                            COLUMN_NAME,
                            ROW_COUNT,
                            SUGGESTION,
                            QUERY)
           VALUES (
                     'LOANS',
                     'LNACRS_REPH_ON_AMT',
                     W_ROWCOUNT,
                     'LNACRS_REPH_ON_AMT SHOULD BE EQAUL LNACRSDTL_REPAY_AMT * LNACRSDTL_NUM_OF_INSTALLMENT',
                     'SELECT LNACRS_REPH_ON_AMT,
       LNACRSDTL_REPAY_FREQ,
       LNACRSDTL_REPAY_AMT,
       LNACRSDTL_NUM_OF_INSTALLMENT,LNACRSDTL_REPAY_AMT * LNACRSDTL_NUM_OF_INSTALLMENT SHOULD_BE
  FROM MIG_LNACRSDTL
 WHERE LNACRSDTL_REPAY_AMT * LNACRSDTL_NUM_OF_INSTALLMENT <>
          LNACRS_REPH_ON_AMT;');
   END IF;
   */
END SP_MACRO_LOANS;
/
