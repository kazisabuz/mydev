CREATE OR REPLACE PROCEDURE SP_FINAL_UPDATE(p_errmsg out  varchar2 )
IS
   W_SQL              VARCHAR2 (3000);

   V_MIG_DATE         DATE;
   V_MIG_BRANCH       NUMBER;

   V_MONTH_END_DATE   DATE;
   V_FIN_YEAR         NUMBER;
BEGIN
   SELECT DISTINCT ACOP_BRANCH_CODE INTO V_MIG_BRANCH FROM  MIG_ACOP_BAL;

   SELECT DISTINCT ACOP_BAL_DATE INTO V_MIG_DATE FROM MIG_ACOP_BAL;

   SELECT TO_CHAR (V_MIG_DATE, 'YYYY') INTO V_FIN_YEAR FROM DUAL;

  <<INSERT_LLACNTOS>>
   BEGIN
      W_SQL := 'TRUNCATE TABLE LLACNTOS';

      EXECUTE IMMEDIATE W_SQL;

      INSERT INTO LLACNTOS
         SELECT A.ACASLLDTL_ENTITY_NUM,
                A.ACASLLDTL_CLIENT_NUM,
                A.ACASLLDTL_LIMIT_LINE_NUM,
                A.ACASLLDTL_INTERNAL_ACNUM,
                B.LNACNT_OUTSTANDING_BALANCE,
                0                                      --- for continious loan
           FROM ACASLLDTL A, MIG_LNACNT B, IACLINK C
          WHERE     A.ACASLLDTL_CLIENT_NUM = C.IACLINK_CIF_NUMBER
                AND A.ACASLLDTL_INTERNAL_ACNUM = C.IACLINK_INTERNAL_ACNUM
                AND B.LNACNT_ACNUM = C.IACLINK_ACTUAL_ACNUM
                AND C.IACLINK_PROD_CODE IN
                       (SELECT P.PRODUCT_CODE
                          FROM PRODUCTS P
                         WHERE     P.PRODUCT_FOR_LOANS = 1
                               AND P.PRODUCT_FOR_RUN_ACS = 1);

      --COMMIT;

      INSERT INTO LLACNTOS
         SELECT A.ACASLLDTL_ENTITY_NUM,
                A.ACASLLDTL_CLIENT_NUM,
                A.ACASLLDTL_LIMIT_LINE_NUM,
                A.ACASLLDTL_INTERNAL_ACNUM,
                  B.LNACNT_OUTSTANDING_BALANCE
                -   (-1)
                  * (  NVL (B.LNACNT_SANCTION_AMT, 0)
                     - NVL (LNACDSDTL_DISB_AMOUNT, 0)),      -- For term Loans
                (-1) * ABS (D.LNACDSDTL_DISB_AMOUNT)
           FROM ACASLLDTL A,
                MIG_LNACNT B,
                IACLINK C,
                MIG_LNACDSDTL D
          WHERE     A.ACASLLDTL_CLIENT_NUM = C.IACLINK_CIF_NUMBER
                AND A.ACASLLDTL_INTERNAL_ACNUM = C.IACLINK_INTERNAL_ACNUM
                AND D.LNACDSDTL_INTERNAL_ACNUM = C.IACLINK_ACTUAL_ACNUM
                AND C.IACLINK_ENTITY_NUM = 1
                AND A.ACASLLDTL_ENTITY_NUM = 1
                AND B.LNACNT_ACNUM = C.IACLINK_ACTUAL_ACNUM
                AND C.IACLINK_PROD_CODE IN
                       (SELECT P.PRODUCT_CODE
                          FROM PRODUCTS P
                         WHERE     P.PRODUCT_FOR_LOANS = 1
                               AND P.PRODUCT_FOR_RUN_ACS = 0);
   --COMMIT;
   END INSERT_LLACNTOS;

  <<MOTHER_NAME_UPDATE>>
   BEGIN
      BEGIN
         FOR IDX
            IN (SELECT INDCLIENTS.INDCLIENT_CODE,
                       M.MOTHER_NAME,
                       INDCLIENTS.ROWID,
                       M.CLIENT_CODE
                  FROM INDCLIENTS, MOTHER M, TEMP_CLIENT T
                 WHERE     INDCLIENTS.INDCLIENT_CODE = T.NEW_CLCODE
                       AND M.CLIENT_CODE = T.OLD_CLCODE)
         LOOP
            UPDATE INDCLIENTS
               SET INDCLIENTS.INDCLIENT_MOTHER_NAME = IDX.MOTHER_NAME
             WHERE INDCLIENTS.ROWID = IDX.ROWID;
         END LOOP;
      END;
   END MOTHER_NAME_UPDATE;

  <<FINAL_UPDATE>>
   BEGIN
      UPDATE CLIENTS C
         SET C.CLIENTS_PAN_GIR_NUM = NULL
       WHERE C.CLIENTS_PAN_GIR_NUM = '0';

      --COMMIT;

      UPDATE DDPOISS
         SET DDPOISS_STATUS = 'A'
       WHERE DDPOISS.DDPOISS_REMIT_CODE = 1;

      --COMMIT;

      UPDATE DEPIA D
         SET D.DEPIA_SOURCE_TABLE = D.DEPIA_ENTRY_TYPE
       WHERE D.DEPIA_ACCR_POSTED_BY = 'MIG' AND D.DEPIA_SOURCE_TABLE IS NULL;

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS.ACNTS_BUSDIVN_CODE = NULL;

      UPDATE CLIENTS
         SET CLIENTS.CLIENTS_BUSDIVN_CODE = NULL;

      --COMMIT;

      UPDATE CLIENTS C
         SET C.CLIENTS_IT_STAT_CODE = '1'
       WHERE C.CLIENTS_IT_STAT_CODE IS NULL;

      --COMMIT;

      UPDATE CLIENTS C
         SET C.CLIENTS_IT_SUB_STAT_CODE = '1'
       WHERE C.CLIENTS_IT_SUB_STAT_CODE IS NULL;

      --COMMIT;

      UPDATE PBDCONTRACT
         SET PBDCONT_DEP_PRD_DAYS = 0
       WHERE PBDCONTRACT.PBDCONT_DEP_PRD_DAYS IS NULL;

      --COMMIT;

      UPDATE DDPOISSDTLANX
         SET DDPOANX_DUPISS_DAY_SL = '0'
       WHERE DDPOANX_DUPISS_DAY_SL IS NULL;

      --COMMIT;

      UPDATE PBDCONTRACT
         SET PBDCONT_DEP_PRD_DAYS = 0
       WHERE PBDCONTRACT.PBDCONT_DEP_PRD_DAYS IS NULL;

      --COMMIT;

      UPDATE DDPOISSDTLANX
         SET DDPOANX_DUPISS_DAY_SL = '0'
       WHERE DDPOANX_DUPISS_DAY_SL IS NULL;

      --COMMIT;

      UPDATE ACNTS ACN
         SET ACN.ACNTS_MMB_INT_ACCR_UPTO =
                (SELECT DISTINCT A.ACOP_BAL_DATE
                   FROM MIG_ACOP_BAL A);                      --MIGTATION DATE

      --COMMIT;

      UPDATE ACNTCBAL
         SET ACNTCBAL_AC_LIEN_AMT =
                (SELECT NVL (DEPACLIEN_AC_LIEN_AMT, 0)
                   FROM DEPACCLIEN
                  WHERE     DEPACCLIEN.DEPACLIEN_DEP_AC_NUM =
                               ACNTCBAL.ACNTCBAL_INTERNAL_ACNUM
                        AND DEPACCLIEN.DEPACLIEN_CONT_NUM =
                               ACNTCBAL.ACNTCBAL_CONTRACT_NUM
                        AND DEPACLIEN_CONT_NUM > 0);

      --COMMIT;

      UPDATE ACNTCBAL
         SET ACNTCBAL_BC_LIEN_AMT = ACNTCBAL_AC_LIEN_AMT
       WHERE ACNTCBAL_AC_LIEN_AMT > 0 AND ACNTCBAL.ACNTCBAL_CURR_CODE = 'BDT'; --SHAMSUDEEN-CHN-        24MAY2012-CHANGED INR TO BDT.

      --COMMIT;

      UPDATE ACNTBAL
         SET ACNTBAL_AC_LIEN_AMT =
                (  SELECT SUM (ACNTLIEN_LIEN_AMOUNT)
                     FROM ACNTLIEN
                    WHERE ACNTLIEN_INTERNAL_ACNUM = ACNTBAL_INTERNAL_ACNUM
                 GROUP BY ACNTLIEN_INTERNAL_ACNUM)
       WHERE     ACNTBAL_ENTITY_NUM = 1 
             AND  ACNTBAL_INTERNAL_ACNUM IN
                    (SELECT ACNTLIEN.ACNTLIEN_INTERNAL_ACNUM FROM ACNTLIEN)
             AND NVL (ACNTBAL_AC_LIEN_AMT, 0) = 0;
             
      UPDATE ACNTBAL
         SET ACNTBAL_BC_LIEN_AMT =
                (  SELECT SUM (ACNTLIEN_LIEN_AMOUNT)
                     FROM ACNTLIEN
                    WHERE ACNTLIEN_INTERNAL_ACNUM = ACNTBAL_INTERNAL_ACNUM
                 GROUP BY ACNTLIEN_INTERNAL_ACNUM)
       WHERE    ACNTBAL_ENTITY_NUM = 1 
             AND ACNTBAL_INTERNAL_ACNUM IN
                    (SELECT ACNTLIEN.ACNTLIEN_INTERNAL_ACNUM FROM ACNTLIEN)
             AND NVL (ACNTBAL_BC_LIEN_AMT, 0) = 0;

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_MKT_CHANNEL_CODE = '01';

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_DCHANNEL_CODE = ' ';

      --COMMIT;

      UPDATE CONNPINFO
         SET CONNP_NATURE_OF_GUARDIAN = 'N';

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_AC_NAME1 = REPLACE (ACNTS_AC_NAME1, '&', '');

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_AC_NAME1 = REPLACE (ACNTS_AC_NAME1, '''', '');

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_AC_NAME1 = REPLACE (ACNTS_AC_NAME1, '<', '');

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_AC_NAME1 = REPLACE (ACNTS_AC_NAME1, '>', '');

      --COMMIT;

      UPDATE CLIENTS
         SET CLIENTS_NAME = REPLACE (CLIENTS_NAME, '&', '');

      --COMMIT;

      UPDATE CLIENTS
         SET CLIENTS_NAME = REPLACE (CLIENTS_NAME, '''', '');

      --COMMIT;

      UPDATE CLIENTS
         SET CLIENTS_NAME = REPLACE (CLIENTS_NAME, '<', '');

      --COMMIT;

      UPDATE CLIENTS
         SET CLIENTS_NAME = REPLACE (CLIENTS_NAME, '>', '');

      --COMMIT;

      UPDATE INDCLIENTS
         SET INDCLIENT_FIRST_NAME = REPLACE (INDCLIENT_FIRST_NAME, '&', ''),
             INDCLIENT_LAST_NAME = REPLACE (INDCLIENT_LAST_NAME, '&', ''),
             INDCLIENT_SUR_NAME = REPLACE (INDCLIENT_SUR_NAME, '&', ''),
             INDCLIENT_MIDDLE_NAME = REPLACE (INDCLIENT_MIDDLE_NAME, '&', '');

      --COMMIT;

      UPDATE INDCLIENTS
         SET INDCLIENT_FIRST_NAME = REPLACE (INDCLIENT_FIRST_NAME, '''', ''),
             INDCLIENT_LAST_NAME = REPLACE (INDCLIENT_LAST_NAME, '''', ''),
             INDCLIENT_SUR_NAME = REPLACE (INDCLIENT_SUR_NAME, '''', ''),
             INDCLIENT_MIDDLE_NAME = REPLACE (INDCLIENT_MIDDLE_NAME, '''', '');

      --COMMIT;

      UPDATE INDCLIENTS
         SET INDCLIENT_FIRST_NAME = REPLACE (INDCLIENT_FIRST_NAME, '<', ''),
             INDCLIENT_LAST_NAME = REPLACE (INDCLIENT_LAST_NAME, '<', ''),
             INDCLIENT_SUR_NAME = REPLACE (INDCLIENT_SUR_NAME, '<', ''),
             INDCLIENT_MIDDLE_NAME = REPLACE (INDCLIENT_MIDDLE_NAME, '<', '');

      --COMMIT;

      UPDATE INDCLIENTS
         SET INDCLIENT_FIRST_NAME = REPLACE (INDCLIENT_FIRST_NAME, '>', ''),
             INDCLIENT_LAST_NAME = REPLACE (INDCLIENT_LAST_NAME, '>', ''),
             INDCLIENT_SUR_NAME = REPLACE (INDCLIENT_SUR_NAME, '>', ''),
             INDCLIENT_MIDDLE_NAME = REPLACE (INDCLIENT_MIDDLE_NAME, '>', '');

      --COMMIT;

      W_SQL :=
            'UPDATE TRAN'
         || V_FIN_YEAR
         || '
       SET TRAN_NARR_DTL1 = REPLACE(TRAN_NARR_DTL1, ''<'', ''''),
           TRAN_NARR_DTL2 = REPLACE(TRAN_NARR_DTL2, ''<'', ''''),
           TRAN_NARR_DTL3 = REPLACE(TRAN_NARR_DTL3, ''<'', '''')';

      EXECUTE IMMEDIATE W_SQL;



      --COMMIT;

      UPDATE LIMITLINE
         SET LIMITLINE.LMTLINE_DP_REQD = 1
       WHERE LMTLINE_PROD_CODE IN (SELECT L.LNPRD_PROD_CODE
                                     FROM LNPRODPM L
                                    WHERE L.LNPRD_DRAWING_POWER_REQ = 1);

      --COMMIT;

      UPDATE LIMITLINE
         SET LIMITLINE.LMTLINE_DP_REQD = 0
       WHERE LMTLINE_PROD_CODE IN (SELECT L.LNPRD_PROD_CODE
                                     FROM LNPRODPM L
                                    WHERE L.LNPRD_DRAWING_POWER_REQ = 0);

      --COMMIT;

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_MMB_INT_ACCR_UPTO = ACNTS_INT_ACCR_UPTO
       WHERE ACNTS_PROD_CODE = 1000 AND ACNTS_INT_ACCR_UPTO IS NOT NULL; ---FOR ALL SAVING ACCOUNT

      --COMMIT;

      UPDATE LNACIRS
         SET LNACIRS_OVERDUE_INT_APPLICABLE = 1
       WHERE LNACIRS_OVERDUE_INT_APPLICABLE <> '1';

      --COMMIT;

      UPDATE LNACIRSHIST
         SET LNACIRSH_OD_INT_APPLICABLE = 1
       WHERE LNACIRSH_OD_INT_APPLICABLE <> '1';

      --COMMIT;

      UPDATE ACNTCBAL
         SET ACNTCBAL_AC_LIEN_AMT = 0
       WHERE ACNTCBAL_AC_LIEN_AMT IS NULL;

      --COMMIT;

      UPDATE ACNTCBAL
         SET ACNTCBAL_BC_LIEN_AMT = 0
       WHERE ACNTCBAL_BC_LIEN_AMT IS NULL;

      --COMMIT;

      UPDATE LOANACNTS
         SET LNACNT_ENTD_ON =
                (SELECT ACNTS_OPENING_DATE
                   FROM ACNTS
                  WHERE ACNTS_INTERNAL_ACNUM =
                           LOANACNTS.LNACNT_INTERNAL_ACNUM);

      --COMMIT;

      UPDATE LOANACNTS
         SET LNACNT_AUTH_ON = LNACNT_ENTD_ON;

      --COMMIT;

      UPDATE LNSUSPLED
         SET LNSUSP_ENTD_ON = LNSUSP_TRAN_DATE,
             LNSUSP_AUTH_ON = LNSUSP_TRAN_DATE;

      --COMMIT;

      UPDATE PBDCONTDSA
         SET PBDCONTDSA_STLMNT_CHOICE = 'P'
       WHERE NVL (PBDCONTDSA_REMIT_CODE, ' ') = 'PO';

      --COMMIT;

      UPDATE PBDCONTDSAHIST
         SET PBDCDSAH_STLMNT_CHOICE = 'P'
       WHERE NVL (PBDCONTDSAHIST.PBDCDSAH_REMIT_CODE, ' ') = 'PO';

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_CONNP_INV_NUM = 0
       WHERE ACNTS_CONNP_INV_NUM IS NULL;

      --COMMIT;

      UPDATE DDPOPAYDB
         SET DDPOPAYDB_ISSUED_ON_BNK = DDPOPAYDB_ISSUED_BANK,
             DDPOPAYDB_ISSUED_ON_BRN = DDPOPAYDB_ISSUED_BRN
       WHERE DDPOPAYDB_REMIT_CODE = 1;                         --FOR PAY ORDER

      --COMMIT;


      UPDATE DDPOPAYDB
         SET DDPOPAYDB_ISSUED_ON_BRN = TO_NUMBER (DDPOPAYDB_ISSUED_ON_BRN);

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_CREDIT_INT_REQD = 1
       WHERE ACNTS_PROD_CODE = 1000;                        -- FOR ALL SAVINGS

      --COMMIT;

      UPDATE CORPCLIENTS
         SET CORPCL_CONNP_INV_NUM = 0
       WHERE TRIM (CORPCL_CONNP_INV_NUM) IS NULL;

      --COMMIT;

      UPDATE DEPIA
         SET DEPIA.DEPIA_PREV_YR_INT_ACCR = 0;

      --COMMIT;

      UPDATE ACNTS A
         SET A.ACNTS_CHQBK_REQD = 0
       WHERE A.ACNTS_PROD_CODE = 2101 AND A.ACNTS_CHQBK_REQD = 1;

      --COMMIT;

      UPDATE STOPCHQ
         SET STOPCHQ_ENTD_ON = STOPCHQ_ENTRY_DATE,
             STOPCHQ_AUTH_ON = STOPCHQ_ENTRY_DATE
       WHERE STOPCHQ_ENTD_BY = 'MIG';

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_SPECIAL_ACNT = 0
       WHERE ACNTS_SPECIAL_ACNT IS NULL;

      --COMMIT;

      UPDATE CLIENTS
         SET CLIENTS_OPENING_DATE = TRUNC (CLIENTS_OPENING_DATE);

      --COMMIT;

      UPDATE ACNTS
         SET ACNTS_OPENING_DATE = TRUNC (ACNTS_OPENING_DATE);

      --COMMIT;

      UPDATE LNACRS
         SET LNACRS_EQU_INSTALLMENT = '1'
       WHERE LNACRS_EQU_INSTALLMENT = 'Y';

      --COMMIT;

      UPDATE LNACRS
         SET LNACRS_EQU_INSTALLMENT = '0'
       WHERE LNACRS_EQU_INSTALLMENT = 'N';

      --COMMIT;

      UPDATE LNACRSHIST
         SET LNACRSH_EQU_INSTALLMENT = '1'
       WHERE LNACRSH_EQU_INSTALLMENT = 'Y';

      --COMMIT;

      UPDATE LNACRSHIST
         SET LNACRSH_EQU_INSTALLMENT = '0'
       WHERE LNACRSH_EQU_INSTALLMENT = 'N';

      --COMMIT;

      UPDATE ASSETCLS
         SET ASSETCLS_LATEST_EFF_DATE = ASSETCLS_NPA_DATE
       WHERE ASSETCLS_NPA_DATE IS NOT NULL;

      --COMMIT;

      UPDATE ASSETCLSHIST
         SET ASSETCLSH_EFF_DATE = ASSETCLSH_NPA_DATE
       WHERE ASSETCLSH_NPA_DATE IS NOT NULL;

      --COMMIT;

      UPDATE LIMITLINE
         SET LMTLINE_SAUTH_CODE = '00'
       WHERE LMTLINE_SAUTH_CODE IS NULL;

      --COMMIT;

      UPDATE LNSUSPLED L
         SET L.LNSUSP_INT_AMT = L.LNSUSP_AMOUNT
       WHERE L.LNSUSP_CHGS_AMT = 0;

      --COMMIT;

      UPDATE LNSUSPLED L
         SET L.LNSUSP_ENTRY_TYPE = '2'
       WHERE L.LNSUSP_ENTRY_TYPE <> '2';

      --COMMIT;

      UPDATE LNACIRSHIST LN
         SET LN.LNACIRSH_AC_LEVEL_INT_REQD = 0
       WHERE     LN.LNACIRSH_INTERNAL_ACNUM IN
                    (SELECT L.LNACIRSH_INTERNAL_ACNUM
                       FROM LNACIRSHIST L, ACNTS A
                      WHERE     L.LNACIRSH_INTERNAL_ACNUM =
                                   A.ACNTS_INTERNAL_ACNUM
                            AND A.ACNTS_PROD_CODE NOT IN
                                   (SELECT P.LNPRD_PROD_CODE
                                      FROM LNPRODPM P
                                     WHERE P.LNPRD_DEPOSIT_LOAN = '1'))
             AND LN.LNACIRSH_AC_LEVEL_INT_REQD = '1';

      --COMMIT;

      UPDATE LNACIRS LN
         SET LN.LNACIRS_AC_LEVEL_INT_REQD = 0
       WHERE     LN.LNACIRS_INTERNAL_ACNUM IN
                    (SELECT L.LNACIRS_INTERNAL_ACNUM
                       FROM LNACIRS L, ACNTS A
                      WHERE     L.LNACIRS_INTERNAL_ACNUM =
                                   A.ACNTS_INTERNAL_ACNUM
                            AND A.ACNTS_PROD_CODE NOT IN
                                   (SELECT P.LNPRD_PROD_CODE
                                      FROM LNPRODPM P
                                     WHERE P.LNPRD_DEPOSIT_LOAN = '1'))
             AND LN.LNACIRS_AC_LEVEL_INT_REQD = '1';

      --COMMIT;


      UPDATE CLIENTS
         SET CLIENTS_PAN_GIR_NUM = NULL
       WHERE NVL (CLIENTS_PAN_GIR_NUM, 0) = '0';
       
       UPDATE CLIENTS 
       SET CLIENTS_TITLE_CODE = NULL;


      W_SQL := 'TRUNCATE TABLE LNTOTINTDBMIG ';

      EXECUTE IMMEDIATE W_SQL;

      INSERT INTO LNTOTINTDBMIG
         SELECT I.IACLINK_ENTITY_NUM LNTOTINTDB_ENTITY_NUM,
                I.IACLINK_INTERNAL_ACNUM LNTOTINTDB_INTERNAL_ACNUM,
                NVL (L.TOTAL_INT_DEBIT, 0) LNTOTINTDB_TOT_INT_DB_AMT,
                0 LNTOTINTDB_TOT_PRIN_DB_AMT
           FROM MIG_LNACNT L, IACLINK I
          WHERE I.IACLINK_ACTUAL_ACNUM = L.LNACNT_ACNUM;

      --COMMIT;

      W_SQL := 'TRUNCATE TABLE ACNTVDBBAL ';

      EXECUTE IMMEDIATE W_SQL;

      INSERT INTO ACNTVDBBAL (ACNTVBBAL_ENTITY_NUM,
                              ACNTVBBAL_INTERNAL_ACNUM,
                              ACNTVBBAL_CURR_CODE,
                              ACNTVBBAL_YEAR,
                              ACNTVBBAL_MONTH,
                              ACNTVBBAL_AC_OPNG_DB_SUM,
                              ACNTVBBAL_AC_OPNG_CR_SUM,
                              ACNTVBBAL_BC_OPNG_DB_SUM,
                              ACNTVBBAL_BC_OPNG_CR_SUM,
                              ACNTVBBAL_OPBAL_ENTD_BY,
                              ACNTVBBAL_OPBAL_ENTD_ON)
         SELECT A.ACBALH_ENTITY_NUM ACNTBBAL_ENTITY_NUM,
                A.ACBALH_INTERNAL_ACNUM ACNTBBAL_INTERNAL_ACNUM,
                AC.ACNTS_CURR_CODE ACNTBBAL_CURR_CODE,
                TO_CHAR (V_MIG_DATE, 'YYYY') ACNTBBAL_YEAR,
                TO_CHAR (V_MIG_DATE, 'MM') ACNTBBAL_MONTH,
                (CASE
                    WHEN A.ACBALH_AC_BAL > 0 THEN 0
                    ELSE ABS (A.ACBALH_AC_BAL)
                 END)
                   ACNTBBAL_AC_OPNG_DB_SUM,
                (CASE
                    WHEN A.ACBALH_AC_BAL > 0 THEN ABS (A.ACBALH_AC_BAL)
                    ELSE 0
                 END)
                   ACNTBBAL_AC_OPNG_CR_SUM,
                (CASE
                    WHEN A.ACBALH_BC_BAL > 0 THEN 0
                    ELSE ABS (A.ACBALH_BC_BAL)
                 END)
                   ACNTBBAL_BC_OPNG_DB_SUM,
                (CASE
                    WHEN A.ACBALH_BC_BAL > 0 THEN ABS (A.ACBALH_BC_BAL)
                    ELSE 0
                 END)
                   ACNTBBAL_BC_OPNG_CR_SUM,
                'MIG' ACNTBBAL_OPBAL_ENTD_BY,
                V_MIG_DATE ACNTBBAL_OPBAL_ENTD_ON
           FROM ACBALASONHIST A, ACNTS AC
          WHERE     A.ACBALH_INTERNAL_ACNUM = AC.ACNTS_INTERNAL_ACNUM
                AND A.ACBALH_ASON_DATE = V_MIG_DATE
                AND AC.ACNTS_BRN_CODE = V_MIG_BRANCH
                AND AC.ACNTS_PROD_CODE = 1000
                AND AC.ACNTS_ENTITY_NUM = 1
                AND A.ACBALH_ENTITY_NUM = 1;

      --COMMIT;

      --FOR PRODUCTS 1030,1040,1060


      INSERT INTO ACNTVDBBAL (ACNTVBBAL_ENTITY_NUM,
                              ACNTVBBAL_INTERNAL_ACNUM,
                              ACNTVBBAL_CURR_CODE,
                              ACNTVBBAL_YEAR,
                              ACNTVBBAL_MONTH,
                              ACNTVBBAL_AC_OPNG_DB_SUM,
                              ACNTVBBAL_AC_OPNG_CR_SUM,
                              ACNTVBBAL_BC_OPNG_DB_SUM,
                              ACNTVBBAL_BC_OPNG_CR_SUM,
                              ACNTVBBAL_OPBAL_ENTD_BY,
                              ACNTVBBAL_OPBAL_ENTD_ON)
         SELECT A.ACBALH_ENTITY_NUM ACNTBBAL_ENTITY_NUM,
                A.ACBALH_INTERNAL_ACNUM ACNTBBAL_INTERNAL_ACNUM,
                AC.ACNTS_CURR_CODE ACNTBBAL_CURR_CODE,
                TO_CHAR (V_MIG_DATE, 'YYYY') ACNTBBAL_YEAR,
                TO_CHAR (V_MIG_DATE, 'MM') ACNTBBAL_MONTH,
                0 ACNTBBAL_AC_OPNG_DB_SUM,
                0 ACNTBBAL_AC_OPNG_CR_SUM,
                0 ACNTBBAL_BC_OPNG_DB_SUM,
                0 ACNTBBAL_BC_OPNG_CR_SUM,
                'MIG' ACNTBBAL_OPBAL_ENTD_BY,
                V_MIG_DATE ACNTBBAL_OPBAL_ENTD_ON
           FROM ACBALASONHIST A, ACNTS AC
          WHERE     A.ACBALH_INTERNAL_ACNUM = AC.ACNTS_INTERNAL_ACNUM
                AND A.ACBALH_ASON_DATE = V_MIG_DATE
                AND AC.ACNTS_BRN_CODE = V_MIG_BRANCH
                AND AC.ACNTS_PROD_CODE IN (1030, 1040, 1060)
                AND AC.ACNTS_ENTITY_NUM = 1
                AND A.ACBALH_ENTITY_NUM = 1;

      --COMMIT;
      W_SQL := 'TRUNCATE TABLE MMB_ACNTS ';

      EXECUTE IMMEDIATE W_SQL;

      INSERT INTO MMB_ACNTS
         SELECT 1,
                SUBSTR (ACBALASONHIST_MIN.ACBALH_INTERNAL_ACNUM, 2, 5)
                   BRANCODE,
                ACBALASONHIST_MIN.ACBALH_INTERNAL_ACNUM,
                ACBALASONHIST_MIN.ACBALH_ASON_DATE,
                ACBALASONHIST_MIN.ACBALH_BC_BAL,
                0,
                TO_CHAR (V_MIG_DATE, 'YYYY'),
                TO_CHAR (V_MIG_DATE, 'MM')
           FROM ACBALASONHIST_MIN;

      --COMMIT;

      --INSERT UNAPPLIED INTO LOANIAMRR & LOANIAMRRDTL

      INSERT INTO LOANIAMRR
         SELECT I.IACLINK_ENTITY_NUM LOANIAMRR_ENTITY_NUM,
                I.IACLINK_BRN_CODE LOANIAMRR_BRN_CODE,
                I.IACLINK_INTERNAL_ACNUM LOANIAMRR_ACNT_NUM,
                V_MIG_DATE LOANIAMRR_VALUE_DATE,
                V_MIG_DATE LOANIAMRR_ACCRUAL_DATE,
                NULL LOANIAMRR_PREV_ACCR_DATE,
                A.ACNTS_CURR_CODE LOANIAMRR_ACNT_CURR,
                0 LOANIAMRR_ACNT_BAL,
                -1 * ABS (B.MIG_BLLOANIA_AMOUNT) LOANIAMRR_TOTAL_NEW_INT_AMT,
                0 LOANIAMRR_INT_ON_AMT,
                0 LOANIAMRR_OD_PORTION,
                0 LOANIAMRR_TOTAL_NEW_OD_INT_AMT,
                0 LOANIAMRR_INT_RATE,
                0 LOANIAMRR_SLAB_AMT,
                0 LOANIAMRR_OD_INT_RATE,
                0 LOANIAMRR_LIMIT,
                0 LOANIAMRR_DP,
                -1 * ABS (B.MIG_BLLOANIA_AMOUNT) LOANIAMRR_INT_AMT,
                -1 * ABS (B.MIG_BLLOANIA_AMOUNT) LOANIAMRR_INT_AMT_RND,
                0 LOANIAMRR_OD_INT_AMT,
                0 LOANIAMRR_OD_INT_AMT_RND,
                1 LOANIAMRR_NPA_STATUS,
                0 LOANIAMRR_NPA_AMT,
                0 LOANIAMRR_NPA_INT_POSTED_AMT,
                0 LOANIAMRR_ARR_INT_AMT
           FROM MIG_BLLOANIA B, IACLINK I, ACNTS A
          WHERE     A.ACNTS_INTERNAL_ACNUM = I.IACLINK_INTERNAL_ACNUM
                AND B.MIG_BLLOANIA_ACNUM = I.IACLINK_ACTUAL_ACNUM
                AND I.IACLINK_ENTITY_NUM = 1
                AND A.ACNTS_ENTITY_NUM = 1;


      --COMMIT;


      INSERT INTO LOANIAMRRDTL
         SELECT I.IACLINK_ENTITY_NUM LOANIAMRRDTL_ENTITY_NUM,
                I.IACLINK_BRN_CODE LOANIAMRRDTL_BRN_CODE,
                I.IACLINK_INTERNAL_ACNUM LOANIAMRRDTL_ACNT_NUM,
                V_MIG_DATE LOANIAMRRDTL_VALUE_DATE,
                V_MIG_DATE LOANIAMRRDTL_ACCRUAL_DATE,
                1 LOANIAMRRDTL_SL_NUM,
                0 LOANIAMRRDTL_INT_RATE,
                -1 * ABS (B.MIG_BLLOANIA_AMOUNT) LOANIAMRRDTL_UPTO_AMT,
                -1 * ABS (B.MIG_BLLOANIA_AMOUNT) LOANIAMRRDTL_INT_AMT,
                -1 * ABS (B.MIG_BLLOANIA_AMOUNT) LOANIAMRRDTL_INT_AMT_RND
           FROM MIG_BLLOANIA B, IACLINK I
          WHERE     B.MIG_BLLOANIA_ACNUM = I.IACLINK_ACTUAL_ACNUM
                AND I.IACLINK_ENTITY_NUM = 1;

      --COMMIT;

      --UPDATE LOANIAMRR & LOANIAMRRDTL

      UPDATE LOANIAMRR
         SET LOANIAMRR_VALUE_DATE = V_MIG_DATE,             --- Migration date
             LOANIAMRR_ACCRUAL_DATE = V_MIG_DATE;           --- Migration date

      --COMMIT;

      UPDATE LOANIAMRRDTL
         SET LOANIAMRRDTL_VALUE_DATE = V_MIG_DATE,          --- Migration date
             LOANIAMRRDTL_ACCRUAL_DATE = V_MIG_DATE;        --- Migration date

      --COMMIT;

      W_SQL := 'TRUNCATE TABLE LNWRTOFF ';

      EXECUTE IMMEDIATE W_SQL;

      INSERT INTO LNWRTOFF
         SELECT 1 LNWRTOFF_ENTITY_NUM,
                I.IACLINK_INTERNAL_ACNUM LNWRTOFF_ACNT_NUM,
                1 LNWRTOFF_SL_NUM,
                L.LNWRTOFF_WRTOFF_DATE LNWRTOFF_WRTOFF_DATE,
                'BDT' LNWRTOFF_CURR_CODE,
                L.LNWRTOFF_WRTOFF_AMT LNWRTOFF_WRTOFF_AMT,
                L.LNWRTOFF_PRIN_WRTOFF_AMT LNWRTOFF_PRIN_WRTOFF_AMT,
                L.LNWRTOFF_INT_WRTOFF_AMT LNWRTOFF_INT_WRTOFF_AMT,
                L.LNWRTOFF_CHG_WRTOFF_AMT LNWRTOFF_CHG_WRTOFF_AMT,
                L.LNWRTOFF_SANC_BY LNWRTOFF_SANC_BY,
                L.LNWRTOFF_SANC_ON LNWRTOFF_SANC_ON,
                L.LNWRTOFF_SANC_REF_NUM LNWRTOFF_SANC_REF_NUM,
                L.LNWRTOFF_REMARKS1 LNWRTOFF_REMARKS1,
                L.LNWRTOFF_REMARKS2 LNWRTOFF_REMARKS2,
                L.LNWRTOFF_REMARKS3 LNWRTOFF_REMARKS3,
                L.LNWRTOFF_ENTRY_TYPE LNWRTOFF_ENTRY_TYPE,
                L.LNWRTOFF_SOURCE_KEY LNWRTOFF_SOURCE_KEY,
                L.POST_TRAN_BRN POST_TRAN_BRN,
                L.POST_TRAN_DATE POST_TRAN_DATE,
                L.POST_TRAN_BATCH_NUM POST_TRAN_BATCH_NUM,
                'MIG' LNWRTOFF_ENTD_BY,
                L.LNWRTOFF_WRTOFF_DATE LNWRTOFF_ENTD_ON,
                L.LNWRTOFF_LAST_MOD_BY LNWRTOFF_LAST_MOD_BY,
                L.LNWRTOFF_ENTD_ON LNWRTOFF_LAST_MOD_ON,
                'MIG' LNWRTOFF_AUTH_BY,
                L.LNWRTOFF_WRTOFF_DATE LNWRTOFF_AUTH_ON,
                NULL LNWRTOFF_REJ_BY,
                NULL LNWRTOFF_REJ_ON,
                L.LNWRTOFF_IBR_BRN_CODE LNWRTOFF_IBR_BRN_CODE,
                L.LNWRTOFF_IBR_TRAN_CODE LNWRTOFF_IBR_TRAN_CODE
           FROM MIG_WRITEOFF L, IACLINK I
          WHERE L.LNWRTOFF_ACNT_NUM = I.IACLINK_ACTUAL_ACNUM;


      W_SQL := 'TRUNCATE TABLE LNWRTOFFRECOV ';

      EXECUTE IMMEDIATE W_SQL;

      INSERT INTO LNWRTOFFRECOV (LNWRTOFFREC_ENTITY_NUM,
                                 LNWRTOFFREC_LN_ACNUM,
                                 LNWRTOFFREC_RECOV_SL,
                                 LNWRTOFFREC_ENTRY_DATE,
                                 LNWRTOFFREC_RECOV_CURR,
                                 LNWRTOFFREC_RECOV_AMT,
                                 LNWRTOFFREC_PRIN,
                                 LNWRTOFFREC_ENTD_BY,
                                 LNWRTOFFREC_ENTD_ON,
                                 LNWRTOFFREC_AUTH_BY,
                                 LNWRTOFFREC_AUTH_ON)
         (SELECT 1,
                 N.ACNTOTN_INTERNAL_ACNUM,
                 ROW_NUMBER ()
                 OVER (
                    PARTITION BY N.ACNTOTN_INTERNAL_ACNUM
                    ORDER BY
                       N.ACNTOTN_INTERNAL_ACNUM, T.LNWRTOFFREC_ENTRY_DATE)
                    LNWRTOFFREC_RECOV_SL,
                 T.LNWRTOFFREC_ENTRY_DATE,
                 T.LNWRTOFFREC_RECOV_CURR,
                 T.LNWRTOFFREC_RECOV_AMT,
                 T.LNWRTOFFREC_PRIN,
                 'MIG',
                 T.LNWRTOFFREC_ENTRY_DATE,
                 'MIG',
                 T.LNWRTOFFREC_ENTRY_DATE
            FROM MIG_WRITEOFF_RECOV T, ACNTOTN N
           WHERE T.LNWRTOFFREC_LN_ACNUM = N.ACNTOTN_OLD_ACNT_NUM);

      BEGIN
         SP_TEST_RESCHEDULE;
      END;

      W_SQL := 'UPDATE TRAN' || V_FIN_YEAR || ' SET TRAN_TYPE_OF_TRAN = 1';
      DBMS_OUTPUT.PUT_LINE (W_SQL);

      EXECUTE IMMEDIATE W_SQL;

      --COMMIT;

      V_MONTH_END_DATE := TRUNC (LAST_DAY (V_MIG_DATE));

      IF V_MONTH_END_DATE = V_MIG_DATE
      THEN
         PKG_TRANS_MIG1.MONTH_END_PROCESS (V_MONTH_END_DATE + 1);
      END IF;
   END FINAL_UPDATE;


  <<UPDATE_CBISS>>
   BEGIN
      UPDATE CBISS
         SET CBISS_CHQBK_PREFIX = UPPER (CBISS_CHQBK_PREFIX)
       WHERE CBISS_CHQBK_PREFIX <> UPPER (CBISS_CHQBK_PREFIX);
   END UPDATE_CBISS;


<<pbdcontract_updat>>

UPDATE PBDCONTRACT
   SET PBDCONT_RENEWAL_OPTION = '1'
 WHERE     PBDCONT_ENTITY_NUM = 1
       AND PBDCONT_PROD_CODE = 1050
       AND PBDCONT_ENTD_BY = 'MIG'
       AND PBDCONT_CLOSURE_DATE IS NULL
       AND PBDCONT_RENEWAL_OPTION IS NULL;
       
  <<pbdcontract_updat>>

  <<LIMITLINE_DP_UPDATE>>
   BEGIN
      UPDATE LIMITLINE
         SET LMTLINE_DP_REQD = 0;

      --COMMIT;

      UPDATE LIMITLINE
         SET LMTLINE_DP_REQD = 1
       WHERE LMTLINE_PROD_CODE IN (SELECT LNPRD_PROD_CODE
                                     FROM LNPRODPM
                                    WHERE LNPRD_DRAWING_POWER_REQ = 1);
   --COMMIT;
   END LIMITLINE_DP_UPDATE;
   <<MATARIALIZED_VIEW_LOAN>>
   BEGIN
   W_SQL:='TRUNCATE TABLE MV_LOAN_ACCOUNT_BAL';
   
   EXECUTE IMMEDIATE  W_SQL;
   
    W_SQL :=
         'INSERT INTO MV_LOAN_ACCOUNT_BAL SELECT  
         A.ACNTS_ENTITY_NUM,
          A.ACNTS_BRN_CODE,
          TRAN_INTERNAL_ACNUM,
          TRAN_AMOUNT,
          TRANADV_INTRD_AC_AMT,
          TRANADV_INTRD_BC_AMT,
          TRANADV_CHARGE_BC_AMT,
          TRAN_DB_CR_FLG,
          TRAN_DATE_OF_TRAN,
          TRAN_VALUE_DATE
     FROM TRANADV'
      || V_FIN_YEAR 
      || ',
       TRAN'
      || V_FIN_YEAR
      || ',
       LOANACNTS L,
       ACNTS A
 WHERE     TRANADV_BRN_CODE = TRAN_BRN_CODE
       AND TRAN_DATE_OF_TRAN = TRANADV_DATE_OF_TRAN
       AND TRANADV_BATCH_NUMBER = TRAN_BATCH_NUMBER
       AND TRANADV_BATCH_SL_NUM = TRAN_BATCH_SL_NUM
       --AND ACNTS_GLACC_CODE = TRAN_GLACC_CODE
       AND L.LNACNT_INTERNAL_ACNUM =  TRAN_INTERNAL_ACNUM
       AND L.LNACNT_INTERNAL_ACNUM =  ACNTS_INTERNAL_ACNUM
       AND A.ACNTS_INTERNAL_ACNUM =  TRAN_INTERNAL_ACNUM
       AND  TRAN_ENTITY_NUM =  ACNTS_ENTITY_NUM
       AND TRANADV_ENTITY_NUM =  ACNTS_ENTITY_NUM
       AND L.LNACNT_ENTITY_NUM =  ACNTS_ENTITY_NUM
       AND TRAN_VALUE_DATE >=
              TRUNC (NVL (L.LNACNT_INT_ACCR_UPTO, A.ACNTS_OPENING_DATE),
                     ''MM'')
       AND TRAN_AUTH_ON IS NOT NULL
       and  tran_entd_by = ''MIG''
       AND A.ACNTS_CLOSURE_DATE IS NULL';
       EXECUTE IMMEDIATE W_SQL  ;
 
   END MATARIALIZED_VIEW_LOAN;
   <<MATARIALIZED_VIEW_OD>>
   BEGIN
   EXECUTE IMMEDIATE' TRUNCATE TABLE MV_LOAN_ACCOUNT_BAL_OD';
     W_SQL :=
         'INSERT INTO MV_LOAN_ACCOUNT_BAL_OD
SELECT  '||
       V_FIN_YEAR|| 'VALUE_YEAR,
       TRAN_INTERNAL_ACNUM,
       TRANADV_INTRD_BC_AMT,
       TRANADV_CHARGE_BC_AMT,
       TRAN_DB_CR_FLG,
       TRAN_DATE_OF_TRAN
  FROM LOANACNTS L,
       ACNTS A,
       TRANADV'
      || V_FIN_YEAR
      || ',TRAN'
      || V_FIN_YEAR
      || '
 WHERE      TRAN_ENTITY_NUM = A.ACNTS_ENTITY_NUM
       AND TRANADV_ENTITY_NUM = A.ACNTS_ENTITY_NUM
       AND TRANADV_BRN_CODE = TRAN_BRN_CODE
       AND TRAN_DATE_OF_TRAN = TRANADV_DATE_OF_TRAN
       AND TRANADV_BATCH_NUMBER = TRAN_BATCH_NUMBER
       AND TRANADV_BATCH_SL_NUM = TRAN_BATCH_SL_NUM
       AND L.LNACNT_INTERNAL_ACNUM =  TRAN_INTERNAL_ACNUM
       AND L.LNACNT_INTERNAL_ACNUM = A.ACNTS_INTERNAL_ACNUM
       AND A.ACNTS_INTERNAL_ACNUM =  TRAN_INTERNAL_ACNUM
       AND TRAN_AUTH_ON IS NOT NULL
       and  tran_entd_by = ''MIG''
       AND (TRANADV_INTRD_BC_AMT <> 0 OR TRANADV_CHARGE_BC_AMT <> 0) ';

   EXECUTE IMMEDIATE W_SQL;

   END MATARIALIZED_VIEW_OD;
   <<TP_DATA>>
   BEGIN
   ------ACNTRNPR--------------------
   EXECUTE IMMEDIATE 'TRUNCATE TABLE ACNTRNPR';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE ACNTRNPRHIST';
   INSERT INTO ACNTRNPR
SELECT  IACLINK_INTERNAL_ACNUM,
        ACTP_LATEST_EFF_DATE,
        ACTP_SRC_FUND,
        ACTP_NOT_CASHR,
        ACTP_NOT_NONCASHR,
        ACTP_NOT_TFREMR,
        ACTP_NOT_NONTFREMR,
        ACTP_MAXAMT_CASHR,
        ACTP_MAXAMT_NCASHR,
        ACTP_MAXAMT_TFREMR,
        ACTP_MAXAMT_NONTFREMR,
        ACTP_CUTOFF_LMT_CASHR,
        ACTP_CUTOFF_LMT_NONCASHR,
        ACTP_CUTOFF_LMT_TFREMR,
        ACTP_CUTOFF_LMT_NONTFREMR,
        ACTP_NOT_CASHP,
        ACTP_NOT_NONCASHP,
        ACTP_NOT_TFREMP,
        ACTP_NOT_NONTFREMP,
        ACTP_MAXAMT_CASHP,
        ACTP_MAXAMT_NCASHP,
        ACTP_MAXAMT_TFREMP,
        ACTP_MAXAMT_NONTFREMP,
        ACTP_TOTAMT_CASHP,
        ACTP_CUTOFF_LMT_CASHP,
        ACTP_CUTOFF_LMT_NONCASHP,
        ACTP_CUTOFF_LMT_TFREMP,
        ACTP_CUTOFF_LMT_NONTFREMP
   FROM MIG_ACNTRNPR,IACLINK
   WHERE IACLINK_ACTUAL_ACNUM = ACTP_ACNT_NUM;
   --------ACNTRNPRHIST-----------------------------
   INSERT INTO ACNTRNPRHIST
SELECT A.ACTP_ACNT_NUM ACTPH_ACNT_NUM,
       A.ACTP_LATEST_EFF_DATE ACTPH_LATEST_EFF_DATE,
       A.ACTP_SRC_FUND ACTPH_SRC_FUND,
       A.ACTP_NOT_CASHR ACTPH_NOT_CASHR,
       A.ACTP_NOT_NONCASHR ACTPH_NOT_NONCASHR,
       A.ACTP_NOT_TFREMR ACTPH_NOT_TFREMR,
       A.ACTP_NOT_NONTFREMR ACTPH_NOT_NONTFREMR,
       A.ACTP_MAXAMT_CASHR ACTPH_MAXAMT_CASHR,
       A.ACTP_MAXAMT_NCASHR ACTPH_MAXAMT_NCASHR,
       A.ACTP_MAXAMT_TFREMR ACTPH_MAXAMT_TFREMR,
       A.ACTP_MAXAMT_NONTFREMR ACTPH_MAXAMT_NONTFREMR,
       A.ACTP_CUTOFF_LMT_CASHR ACTPH_CUTOFF_LMT_CASHR,
       A.ACTP_CUTOFF_LMT_NONCASHR ACTPH_CUTOFF_LMT_NONCASHR,
       A.ACTP_CUTOFF_LMT_TFREMR ACTPH_CUTOFF_LMT_TFREMR,
       A.ACTP_CUTOFF_LMT_NONTFREMR ACTPH_CUTOFF_LMT_NONTFREMR,
       A.ACTP_NOT_CASHP ACTPH_NOT_CASHP,
       A.ACTP_NOT_NONCASHP ACTPH_NOT_NONCASHP,
       A.ACTP_NOT_TFREMP ACTPH_NOT_TFREMP,
       A.ACTP_NOT_NONTFREMP ACTPH_NOT_NONTFREMP,
       A.ACTP_MAXAMT_CASHP ACTPH_MAXAMT_CASHP,
       A.ACTP_MAXAMT_NCASHP ACTPH_MAXAMT_NCASHP,
       A.ACTP_MAXAMT_TFREMP ACTPH_MAXAMT_TFREMP,
       A.ACTP_MAXAMT_NONTFREMP ACTPH_MAXAMT_NONTFREMP,
       'MIG' ACTPH_ENTD_BY,
       V_MIG_DATE ACTPH_ENTD_ON,
       NULL ACTPH_LAST_MOD_BY,
       NULL ACTPH_LAST_MOD_ON,
       'MIG' ACTPH_AUTH_BY,
       V_MIG_DATE ACTPH_AUTH_ON,
       NULL TBA_MAIN_KEY,
       A.ACTP_CUTOFF_LMT_CASHP ACTPH_CUTOFF_LMT_CASHP,
       A.ACTP_CUTOFF_LMT_NONCASHP ACTPH_CUTOFF_LMT_NONCASHP,
       A.ACTP_CUTOFF_LMT_TFREMP ACTPH_CUTOFF_LMT_TFREMP,
       a.ACTP_CUTOFF_LMT_NONTFREMP ACTPH_CUTOFF_LMT_NONTFREMP
  FROM ACNTRNPR A;
 
   END  TP_DATA;
      COMMIT;
   EXCEPTION
   WHEN OTHERS THEN 
   P_ERRMSG:=SQLERRM;


END;
/
