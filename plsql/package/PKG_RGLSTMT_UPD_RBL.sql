CREATE OR REPLACE PACKAGE PKG_RGLSTMT_UPD IS

 PROCEDURE SP_RGLSTMT_UPD(V_ENTITY_NUM    IN NUMBER,
                           P_BRN_CODE      IN NUMBER,
                           P_GLACC_CODE    IN VARCHAR2,
                           P_CURR_CODE     IN VARCHAR2,
                           P_FROM_DATE     IN VARCHAR2,
                           P_UPTO_DATE     IN VARCHAR2,
                           P_DISP_IN_BCURR IN VARCHAR2 DEFAULT '0',
                           P_RPT_SERIAL    OUT NUMBER,
                           P_ERROR         OUT VARCHAR2,
                           P_SUBBRN_CODE   IN NUMBER);

END PKG_RGLSTMT_UPD;
/

CREATE OR REPLACE PACKAGE BODY PKG_RGLSTMT_UPD IS
  USR_EXCEP EXCEPTION;

  W_ERROR         VARCHAR2(1000);
  W_BRN_CODE      NUMBER(6);
  W_SUBBRN_CODE   NUMBER(8);
  W_GLACC_CODE    VARCHAR2(15);
  W_INP_CURR      VARCHAR2(3);
  W_CURR_CODE     VARCHAR2(3);
  W_FROM_DATE     DATE;
  W_UPTO_DATE     DATE;
  W_RPT_SERIAL    NUMBER;
  W_USRBRN_CODE   NUMBER(6);
  W_OPEN_BAL      NUMBER(18, 3);
  W_CLSE_BAL      NUMBER(18, 3);
  V_AC_OPEN_BAL   NUMBER(18, 3);
  V_BC_OPEN_BAL   NUMBER(18, 3);
  V_AC_CLOSE_BAL  NUMBER(18, 3);
  V_BC_CLOSE_BAL  NUMBER(18, 3);
  W_AC_NAME1      VARCHAR2(50);
  W_OPST          VARCHAR2(2);
  W_CLST          VARCHAR2(2);
  W_EXEC_SQL      CLOB;
  W_CBD           DATE;
  W_USER_ID       VARCHAR2(8);
  W_DISP_IN_BCURR CHAR(1);
  W_AMOUNT_WHERE  VARCHAR2(150);
  W_CURR_FIELD    VARCHAR2(150);

  PROCEDURE INIT_PARA IS
  BEGIN
    W_ERROR         := '';
    W_BRN_CODE      := 0;
    W_SUBBRN_CODE   := 0;
    W_GLACC_CODE    := '';
    W_INP_CURR      := '';
    W_CURR_CODE     := '';
    W_FROM_DATE     := NULL;
    W_UPTO_DATE     := NULL;
    W_RPT_SERIAL    := 0;
    W_USRBRN_CODE   := 0;
    W_OPEN_BAL      := 0;
    W_CLSE_BAL      := 0;
    W_AC_NAME1      := '';
    W_OPST          := '';
    W_CLST          := '';
    W_EXEC_SQL      := '';
    W_CBD           := NULL;
    W_USER_ID       := '';
    W_DISP_IN_BCURR := '';
    W_AMOUNT_WHERE  := '';
    W_CURR_FIELD    := '';
  END INIT_PARA;

  PROCEDURE CONSTRUCT_SQL_QUERY IS
    W_TRAN_SQL          CLOB;
    W_EACH_SQL          CLOB;
    W_YEARCOMP          VARCHAR2(10);
    W_TABLECOMP         VARCHAR2(10);
    W_GLACCWHERE        VARCHAR2(350);
    W_AND               VARCHAR2(10);
    W_TRANAUTHONWHERE   VARCHAR2(35);
    W_TRANAMTWHERE      VARCHAR2(35);
    W_TRANDATEFROMWHERE VARCHAR2(35);
    W_TRANDATEUPTOWHERE VARCHAR2(35);
    W_TRANBATWHERE      VARCHAR2(500);
    W_MAINFOOTER        VARCHAR2(500);
    W_FIRST_TIME        BOOLEAN DEFAULT FALSE;
    W_MAINHEADER        CLOB;
    W_TRANSQL           CLOB;
    W_FROM_YEAR         NUMBER;
    W_UPTO_YEAR         NUMBER;
    W_BRNCURR_SQL       VARCHAR2(150);
    W_SUBBRN_SQL        VARCHAR2(150);
  BEGIN
    W_BRNCURR_SQL := '';
    W_SUBBRN_SQL  := '';
    W_CURR_FIELD  := 'TRAN_CURR_CODE';
    IF (W_DISP_IN_BCURR = '1') THEN
      W_CURR_FIELD := 'PKG_PB_GLOBAL.FN_GET_INS_BASE_CURR(PKG_ENTITY.FN_GET_ENTITY_CODE)';
    END IF;

    W_MAINHEADER := ' SELECT ' || W_RPT_SERIAL ||
                    ' SERIAL,TRAN_GLACC_CODE,TRAN_BRN_CODE,TRAN_BATCH_NUMBER,TRAN_BATCH_SL_NUM,TRAN_AUTH_ON,
        TO_CHAR(TRAN_DATE_OF_TRAN,''DDMMYYYY'') TRDATE, TRAN_DATE_OF_TRAN,TO_CHAR(TRAN_VALUE_DATE,''DDMMYYYY'') TVDATE, TRAN_VALUE_DATE, 1 DUMY, TRAN_CURR_CODE,';

    W_MAINHEADER := W_MAINHEADER || 'NARRDTL,';

    W_MAINHEADER := W_MAINHEADER ||
                    'TRAN_AMTCR,TRAN_AMTCR_FRMT,TRAN_AMTDB, TRAN_AMTDB_FRMT,AMT ,AMT_FRMT, DECODE(SIGN(AMT),-1,''DB'',''CR'') DB_CR,TRAN_DEPT_CODE , TRANBAT_SUBBRN_CODE SUBBRN_CODE FROM
        (SELECT TRAN_GLACC_CODE,TRAN_BRN_CODE, TRAN_BATCH_NUMBER,TRAN_BATCH_SL_NUM,TRAN_AUTH_ON,TRAN_DATE_OF_TRAN,TRAN_VALUE_DATE,
        TRAN_CURR_CODE,NARRDTL,TRAN_DEPT_CODE,TRAN_AMTCR,TRAN_AMTCR_FRMT,TRAN_AMTDB, TRAN_AMTDB_FRMT, AMT + ' ||
                    W_OPEN_BAL ||
                    ' AMT,
        SP_GETFORMAT( PKG_ENTITY.FN_GET_ENTITY_CODE,' ||
                    W_CURR_FIELD || ',ABS(AMT + ' || W_OPEN_BAL ||
                    ') ) AMT_FRMT , TRANBAT_SUBBRN_CODE FROM
        (SELECT TRAN_GLACC_CODE,TRAN_BRN_CODE, TRAN_BATCH_NUMBER,TRAN_BATCH_SL_NUM, TRAN_AUTH_ON, TRAN_DATE_OF_TRAN,TRAN_VALUE_DATE,
        TRAN_CURR_CODE,NARRDTL,TRAN_DEPT_CODE,TRAN_AMTDB, SP_GETFORMAT( PKG_ENTITY.FN_GET_ENTITY_CODE,' ||
                    W_CURR_FIELD ||
                    ', ABS(TRAN_AMTDB)) TRAN_AMTDB_FRMT,
        TRAN_AMTCR, SP_GETFORMAT( PKG_ENTITY.FN_GET_ENTITY_CODE,' ||
                    W_CURR_FIELD ||
                    ',ABS(TRAN_AMTCR)) TRAN_AMTCR_FRMT,
        SUM(TRAN_AMTCR + TRAN_AMTDB) OVER(ORDER BY ROWNUM) AMT,TRANBAT_SUBBRN_CODE FROM (SELECT * FROM ( ';

    W_AMOUNT_WHERE := 'TRAN_AMOUNT';
    IF (W_DISP_IN_BCURR = '1') THEN
      W_AMOUNT_WHERE := 'TRAN_BASE_CURR_EQ_AMT';
    END IF;

    W_TRANSQL := ' SELECT ROWNUM,TRAN_VALUE_DATE,TRAN_BRN_CODE,TRAN_AUTH_ON,TRAN_CURR_CODE,TRAN_DATE_OF_TRAN,TRAN_BATCH_NUMBER,TRAN_BATCH_SL_NUM,
        TRAN_GLACC_CODE,TRAN_DB_CR_FLG, DECODE(TRAN_DB_CR_FLG,''D'',-' ||
                 W_AMOUNT_WHERE ||
                 ',0) TRAN_AMTDB, DECODE(TRAN_DB_CR_FLG,''C'',' ||
                 W_AMOUNT_WHERE ||
                 ',0) TRAN_AMTCR,
        DECODE(TRIM(T.TRAN_NARR_DTL1),NULL,DECODE(NVL(T.TRAN_INSTR_CHQ_NUMBER,0),''0'',TR.TRANBAT_NARR_DTL1 || '' '' ||TR.TRANBAT_NARR_DTL2|| '' '' ||TR.TRANBAT_NARR_DTL3,
        TR.TRANBAT_NARR_DTL1 || '' '' || TR.TRANBAT_NARR_DTL2|| '' '' ||TR.TRANBAT_NARR_DTL3||'' Inst num ''||T.TRAN_INSTR_CHQ_PFX||''''||T.TRAN_INSTR_CHQ_NUMBER),
        DECODE(NVL(T.TRAN_INSTR_CHQ_NUMBER,0),''0'',T.TRAN_NARR_DTL1 || '' ''|| T.TRAN_NARR_DTL2||'' ''|| T.TRAN_NARR_DTL3,T.TRAN_NARR_DTL1 ||'' ''||
        T.TRAN_NARR_DTL2||'' ''|| T.TRAN_NARR_DTL3 || '' Inst num ''||T.TRAN_INSTR_CHQ_PFX||''''||T.TRAN_INSTR_CHQ_NUMBER)) NARRDTL,TRAN_DEPT_CODE, TRANBAT_SUBBRN_CODE FROM TRAN';

    W_TRANBATWHERE      := ' AND TRAN_DATE_OF_TRAN = TRANBAT_DATE_OF_TRAN AND TRAN_BATCH_NUMBER = TRANBAT_BATCH_NUMBER AND TRAN_BRN_CODE = TRANBAT_BRN_CODE ';
    W_MAINFOOTER        := ')ORDER BY TRAN_DATE_OF_TRAN ASC,TRAN_AUTH_ON ASC,TRAN_BRN_CODE ASC,TRAN_BATCH_NUMBER ASC,TRAN_BATCH_SL_NUM ASC)))';
    W_GLACCWHERE        := ' TR WHERE TRANBAT_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND TRAN_ENTITY_NUM = PKG_ENTITY.FN_GET_ENTITY_CODE AND 0 = FN_CHKTRANCD_DISABLED(PKG_ENTITY.FN_GET_ENTITY_CODE,TRAN_PROD_CODE,TRAN_CODE) AND TRAN_GLACC_CODE = ';
    W_TABLECOMP         := ' T,TRANBAT';
    W_TRANDATEFROMWHERE := ' TRAN_DATE_OF_TRAN  >= ';
    W_TRANDATEUPTOWHERE := ' TRAN_DATE_OF_TRAN  <= ';
    W_AND               := ' AND ';
    W_TRANAMTWHERE      := ' ' || W_AMOUNT_WHERE || ' <> 0 ';
    W_TRANAUTHONWHERE   := ' TRAN_AUTH_ON IS NOT NULL ';
    IF (W_BRN_CODE <> 0) THEN
      W_BRNCURR_SQL := ' AND TRAN_ACING_BRN_CODE = ' || W_BRN_CODE;
    END IF;

    IF W_SUBBRN_CODE <> 0
      THEN
         IF W_SUBBRN_CODE = 99999999              --ONLY SUB BRANCHES
         THEN
            W_SUBBRN_SQL := ' AND TRANBAT_SUBBRN_CODE <> 0';
         ELSIF W_SUBBRN_CODE = 11111111
         THEN
            W_SUBBRN_SQL := W_SUBBRN_SQL || '';
         ELSE
            W_SUBBRN_SQL := W_SUBBRN_SQL || ' AND TRANBAT_SUBBRN_CODE = ' || W_SUBBRN_CODE;
         END IF;
      ELSE
        -- W_SUBBRN_SQL := W_SUBBRN_SQL || ' AND TRANBAT_SUBBRN_CODE = 0';
         -- If the sub branch code is null, then there will be no condition for subbranch code.
         W_SUBBRN_SQL := W_SUBBRN_SQL || '';
      END IF;

    IF TRIM(W_INP_CURR) IS NOT NULL THEN
      W_BRNCURR_SQL := W_BRNCURR_SQL || ' AND TRAN_CURR_CODE = ' || CHR(39) ||
                       W_INP_CURR || CHR(39);
    END IF;
    W_FIRST_TIME := TRUE;
    W_EXEC_SQL   := '';

    W_FROM_YEAR := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE, W_FROM_DATE);
    W_UPTO_YEAR := SP_GETFINYEAR(PKG_ENTITY.FN_GET_ENTITY_CODE, W_UPTO_DATE);

    FOR I IN W_FROM_YEAR .. W_UPTO_YEAR LOOP
      W_YEARCOMP := '' || I;

      W_EACH_SQL := W_TRANSQL || W_YEARCOMP || W_TABLECOMP || W_YEARCOMP ||
                    W_GLACCWHERE || W_GLACC_CODE || W_BRNCURR_SQL || W_AND ||
                    W_TRANAUTHONWHERE || W_AND || W_TRANAMTWHERE || W_AND ||
                    W_TRANDATEFROMWHERE || CHR(39) || W_FROM_DATE ||
                    CHR(39) || W_AND || W_TRANDATEUPTOWHERE || CHR(39) ||
                    W_UPTO_DATE || CHR(39) || W_SUBBRN_SQL || W_TRANBATWHERE;
      IF (W_FIRST_TIME) THEN
        W_TRAN_SQL := W_TRAN_SQL || '' || W_EACH_SQL;
      ELSE
        W_TRAN_SQL := W_TRAN_SQL || ' UNION ALL ' || W_EACH_SQL;
      END IF;
      W_FIRST_TIME := FALSE;

      W_EXEC_SQL := W_MAINHEADER || W_TRAN_SQL || W_MAINFOOTER;
    END LOOP;

    SP_DISP(PKG_ENTITY.FN_GET_ENTITY_CODE, W_EXEC_SQL);
    BEGIN 
LOG_ERROR('GLSTMT', W_EXEC_SQL);   -------ADD THIS PROCEDURE FOR PRINT W_SQL RESULT
END ;
  END CONSTRUCT_SQL_QUERY;

  PROCEDURE INSERT_RTMPACSTADDL IS
    L_DEC_LEN CHAR(1);
  BEGIN
    <<CHK_CURR>>
    BEGIN
      SELECT CASE
               WHEN CURR_NOOF_SUB_UNITS = 0 THEN
                'O'
               WHEN CURR_NOOF_SUB_UNITS < 100 THEN
                '1'
               WHEN CURR_NOOF_SUB_UNITS < 1000 THEN
                '2'
               WHEN CURR_NOOF_SUB_UNITS >= 1000 THEN
                '3'
             END
        INTO L_DEC_LEN
        FROM CURRENCY
       WHERE CURR_CODE = W_CURR_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_DEC_LEN := '2';
    END CHK_CURR;

    INSERT INTO RTMPGLSTADDL
      (ADDL_TEMP_SERIAL,
       ADDL_GLACC_CODE,
       ADDL_AC_NAME1,
       ADDL_CURR_CODE,
       ADDL_DEC_LEN,
       ADDL_OPEN_BAL,
       ADDL_CLOS_BAL,
       ADDL_OPEN_FLG,
       ADDL_CLOS_FLG,
       ADDL_FROM_DATE,
       ADDL_UPTO_DATE)
    VALUES
      (W_RPT_SERIAL,
       W_GLACC_CODE,
       W_AC_NAME1,
       W_CURR_CODE,
       NVL(L_DEC_LEN, '2'),
       ABS(W_OPEN_BAL),
       ABS(W_CLSE_BAL),
       W_OPST,
       W_CLST,
       W_FROM_DATE,
       W_UPTO_DATE);
  END INSERT_RTMPACSTADDL;

  PROCEDURE PROCESS_RGLSTMT IS
  BEGIN
    IF W_FROM_DATE IS NOT NULL AND W_UPTO_DATE IS NOT NULL THEN
      GET_ASON_GLBAL(PKG_ENTITY.FN_GET_ENTITY_CODE,
                     W_BRN_CODE,
                     W_GLACC_CODE,
                     W_INP_CURR,
                     W_FROM_DATE - 1,
                     W_CBD,
                     V_AC_OPEN_BAL,
                     V_BC_OPEN_BAL,
                     W_ERROR);
      IF TRIM(W_ERROR) IS NOT NULL THEN
        RAISE USR_EXCEP;
      END IF;

      W_OPEN_BAL := V_AC_OPEN_BAL;
      IF (W_DISP_IN_BCURR = '1') THEN
        W_OPEN_BAL := V_BC_OPEN_BAL;
      END IF;

      GET_ASON_GLBAL(PKG_ENTITY.FN_GET_ENTITY_CODE,
                     W_BRN_CODE,
                     W_GLACC_CODE,
                     W_INP_CURR,
                     W_UPTO_DATE,
                     W_CBD,
                     V_AC_CLOSE_BAL,
                     V_BC_CLOSE_BAL,
                     W_ERROR);
      IF TRIM(W_ERROR) IS NOT NULL THEN
        RAISE USR_EXCEP;
      END IF;
      W_CLSE_BAL := V_AC_CLOSE_BAL;
      IF (W_DISP_IN_BCURR = '1') THEN
        W_CLSE_BAL := V_BC_CLOSE_BAL;
      END IF;

      IF (W_OPEN_BAL > 0) THEN
        W_OPST := 'CR';
      ELSIF (W_OPEN_BAL < 0) THEN
        W_OPST := 'DB';
      ELSE
        W_OPST := ' ';
      END IF;

      IF (W_CLSE_BAL > 0) THEN
        W_CLST := 'CR';
      ELSIF (W_CLSE_BAL < 0) THEN
        W_CLST := 'DB';
      ELSE
        W_CLST := ' ';
      END IF;

      INSERT_RTMPACSTADDL;

      CONSTRUCT_SQL_QUERY;

      EXECUTE IMMEDIATE 'INSERT INTO RTMPGLST (' || W_EXEC_SQL || ')';

    END IF;

  END PROCESS_RGLSTMT;

  PROCEDURE READ_EXTGL IS
  BEGIN
    SELECT EXTGL_EXT_HEAD_DESCN
      INTO W_AC_NAME1
      FROM EXTGL
     WHERE EXTGL_ACCESS_CODE = W_GLACC_CODE;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      W_ERROR := 'Invalid GL Access Code';
      RAISE USR_EXCEP;
  END READ_EXTGL;

  PROCEDURE SP_RGLSTMT_UPD(V_ENTITY_NUM    IN NUMBER,
                           P_BRN_CODE      IN NUMBER,
                           P_GLACC_CODE    IN VARCHAR2,
                           P_CURR_CODE     IN VARCHAR2,
                           P_FROM_DATE     IN VARCHAR2,
                           P_UPTO_DATE     IN VARCHAR2,
                           P_DISP_IN_BCURR IN VARCHAR2 DEFAULT '0',
                           P_RPT_SERIAL    OUT NUMBER,
                           P_ERROR         OUT VARCHAR2,
                           P_SUBBRN_CODE   IN NUMBER) IS
  BEGIN
    PKG_ENTITY.SP_SET_ENTITY_CODE(V_ENTITY_NUM);
    <<START_PROC>>
    BEGIN
      INIT_PARA;
      W_BRN_CODE    := NVL(P_BRN_CODE, 0);
      W_SUBBRN_CODE := NVL(P_SUBBRN_CODE, 0);
      W_GLACC_CODE  := TRIM(P_GLACC_CODE);
      W_INP_CURR    := TRIM(P_CURR_CODE);
      W_CURR_CODE   := W_INP_CURR;
      W_FROM_DATE   := TO_DATE(P_FROM_DATE, 'DD-MM-YYYY');
      W_UPTO_DATE   := TO_DATE(P_UPTO_DATE, 'DD-MM-YYYY');
      W_RPT_SERIAL  := NVL(P_RPT_SERIAL, 0);

      IF (W_RPT_SERIAL = 0) THEN
        W_RPT_SERIAL := PKG_PB_GLOBAL.SP_GET_REPORT_SL(PKG_ENTITY.FN_GET_ENTITY_CODE);
      END IF;
      W_USER_ID := PKG_EODSOD_FLAGS.PV_USER_ID;
      W_CBD     := PKG_EODSOD_FLAGS.PV_CURRENT_DATE;
      IF W_CBD IS NULL THEN
        W_CBD := PKG_PB_GLOBAL.FN_GET_CURR_BUS_DATE(PKG_ENTITY.FN_GET_ENTITY_CODE);
      END IF;
      W_DISP_IN_BCURR := NVL(P_DISP_IN_BCURR, '0');
      IF (W_DISP_IN_BCURR = '1') THEN
        W_CURR_CODE := PKG_PB_GLOBAL.FN_GET_INS_BASE_CURR(PKG_ENTITY.FN_GET_ENTITY_CODE);
      END IF;

      DELETE FROM RTMPGLST WHERE TEMP_SERIAL = W_RPT_SERIAL;
      DELETE FROM RTMPGLSTADDL WHERE ADDL_TEMP_SERIAL = W_RPT_SERIAL;

      READ_EXTGL;

      PROCESS_RGLSTMT;

    EXCEPTION
      WHEN OTHERS THEN
        IF TRIM(W_ERROR) IS NULL THEN
          W_ERROR := SUBSTR('Error in SP_RGLSTMT_UPD ' || SQLERRM, 1, 1000);
        END IF;
    END START_PROC;
    P_RPT_SERIAL := W_RPT_SERIAL;
    P_ERROR      := W_ERROR;
  END SP_RGLSTMT_UPD;

END PKG_RGLSTMT_UPD;
