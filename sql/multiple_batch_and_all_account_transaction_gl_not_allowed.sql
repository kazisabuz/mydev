/*<TOAD_FILE_CHUNK>*/
CREATE TABLE MANUAL_TRAN_SIN_MULTI
(
  VOUTURE_NUMBER    NUMBER,	---- Batch serial Number .
  BRANCH_CODE       NUMBER,	---- Transaction Branch Code.
  DEBIT_AC_NUMBER   NUMBER,	---- Debit Account Number if account is debit else insert zero(0).
  CREDIT_AC_NUMBER  NUMBER,	---- Credit Account Number if account is credit else insert zero(0).
  PRODUCT_TYPE      VARCHAR2(1 BYTE),	----- 'L' for loan account , 'C' for contract based account and 'G	' for all others type accounts.
  LOAN_TRAN_ACTION  VARCHAR2(1 BYTE),	---- If account is loan enter 'I' for interest, 'P' for Principal and 'C' for charge.
  DEBIT_GL_NUMBER   VARCHAR2(20 BYTE),	---- Debit GL Code if GL is debit else insert zero(0).
  CREDIT_GL_NUMBER  VARCHAR2(20 BYTE),	---- Credit GL Code if GL is Credit else insert zero(0).
  DEBIT_AMOUNT      NUMBER(18,2),	---- Debit Amount if debit otherwise zero (0).
  CREDIT_AMOUNT     NUMBER(18,2),	---- Credit Amount if credit otherwise zero (0)
  BATCH_NUMBER      NUMBER,		---- Batch number generated by autopost after transaction completed.
  NARATION          VARCHAR2(200 BYTE)	---- Naration about transaction.
)
TABLESPACE TBFES;

------------- Sample Data ----------------------
INSERT INTO MANUAL_TRAN_SIN_MULTI
   (VOUTURE_NUMBER, BRANCH_CODE, DEBIT_AC_NUMBER, CREDIT_AC_NUMBER, PRODUCT_TYPE, LOAN_TRAN_ACTION, DEBIT_GL_NUMBER, CREDIT_GL_NUMBER, DEBIT_AMOUNT, CREDIT_AMOUNT, NARATION)
 VALUES
   (1, 16204, 0, 13317500001161, 'L', 
    'I', '0', '0', 0, 692, 
    'Interest Reversal ');
INSERT INTO MANUAL_TRAN_SIN_MULTI
   (VOUTURE_NUMBER, BRANCH_CODE, DEBIT_AC_NUMBER, CREDIT_AC_NUMBER, PRODUCT_TYPE, LOAN_TRAN_ACTION, DEBIT_GL_NUMBER, CREDIT_GL_NUMBER, DEBIT_AMOUNT, CREDIT_AMOUNT, NARATION)
 VALUES
   (1, 16204, 0, 0, 'L', 
    'I', '146101104', '0', 692, 0, 
    'Interest Reversal ');
INSERT INTO MANUAL_TRAN_SIN_MULTI
   (VOUTURE_NUMBER, BRANCH_CODE, DEBIT_AC_NUMBER, CREDIT_AC_NUMBER, PRODUCT_TYPE, DEBIT_GL_NUMBER, CREDIT_GL_NUMBER, DEBIT_AMOUNT, CREDIT_AMOUNT, NARATION)
 VALUES
   (2, 1065, 0, 10106500002505, 'G', 
    '0', '0', 0, 5000, 'Test Transaction');
INSERT INTO MANUAL_TRAN_SIN_MULTI
   (VOUTURE_NUMBER, BRANCH_CODE, DEBIT_AC_NUMBER, CREDIT_AC_NUMBER, PRODUCT_TYPE, DEBIT_GL_NUMBER, CREDIT_GL_NUMBER, DEBIT_AMOUNT, CREDIT_AMOUNT, NARATION)
 VALUES
   (3, 1206, 0, 0, 'C', 
    '146101104', '0', 100, 0, 'Test Transaction');
INSERT INTO MANUAL_TRAN_SIN_MULTI
   (VOUTURE_NUMBER, BRANCH_CODE, DEBIT_AC_NUMBER, CREDIT_AC_NUMBER, PRODUCT_TYPE, DEBIT_GL_NUMBER, CREDIT_GL_NUMBER, DEBIT_AMOUNT, CREDIT_AMOUNT, NARATION)
 VALUES
   (2, 1065, 0, 0, 'G', 
    '146101104', '0', 5000, 0, 'Test Transaction');
INSERT INTO MANUAL_TRAN_SIN_MULTI
   (VOUTURE_NUMBER, BRANCH_CODE, DEBIT_AC_NUMBER, CREDIT_AC_NUMBER, PRODUCT_TYPE, DEBIT_GL_NUMBER, CREDIT_GL_NUMBER, DEBIT_AMOUNT, CREDIT_AMOUNT, NARATION)
 VALUES
   (3, 1206, 0, 10120600010795, 'C', 
    '0', '0', 0, 100, 'Test Transaction');

---------------------------------------------------------
CREATE OR REPLACE PROCEDURE SP_AUTOPOST_TRAN
(P_ENTITY_CODE NUMBER,
 P_BRN_CODE NUMBER,
 P_USER_ID VARCHAR2
)
  IS
 W_POST_ARRAY_INDEX NUMBER(14) DEFAULT 0;
 W_ERROR VARCHAR2(3000);
 V_USER_EXCEPTION EXCEPTION;
 LOANACNT NUMBER;
 IDX1 NUMBER DEFAULT 0;
 W_CURRENT_DATE DATE;
 W_ERROR_CODE VARCHAR2(10);
 W_BATCH_NUM NUMBER;
 V_NUMBER_OF_TRAN NUMBER;
 W_ERR_CODE VARCHAR2(300);
    V_NARR1 VARCHAR2(200);
    V_NARR2 VARCHAR2(200);
    V_NARR3 VARCHAR2(200);
    V_CONTRACT_NUMBER NUMBER(10);
 
V_VOUTURE_NUMBER MANUAL_TRAN_SIN_MULTI.VOUTURE_NUMBER%TYPE;
V_BRANCH_CODE MANUAL_TRAN_SIN_MULTI.BRANCH_CODE%TYPE;
V_DEBIT_AC_NUMBER MANUAL_TRAN_SIN_MULTI.DEBIT_AC_NUMBER%TYPE;
V_CREDIT_AC_NUMBER MANUAL_TRAN_SIN_MULTI.CREDIT_AC_NUMBER%TYPE;
V_PRODUCT_TYPE MANUAL_TRAN_SIN_MULTI.PRODUCT_TYPE%TYPE;
V_LOAN_TRAN_ACTION MANUAL_TRAN_SIN_MULTI.LOAN_TRAN_ACTION%TYPE;
V_DEBIT_GL_NUMBER MANUAL_TRAN_SIN_MULTI.DEBIT_GL_NUMBER%TYPE;
V_CREDIT_GL_NUMBER MANUAL_TRAN_SIN_MULTI.CREDIT_GL_NUMBER%TYPE;
V_DEBIT_AMOUNT MANUAL_TRAN_SIN_MULTI.DEBIT_AMOUNT%TYPE;
V_CREDIT_AMOUNT MANUAL_TRAN_SIN_MULTI.CREDIT_AMOUNT%TYPE;
V_BATCH_NUMBER MANUAL_TRAN_SIN_MULTI.BATCH_NUMBER%TYPE;

  PROCEDURE MOVE_TO_TRANREC_GL(P_BRN_CODE IN NUMBER, P_DEBIT_CREDIT VARCHAR2,
                                   P_CREDIT_GL VARCHAR2,
                                   P_TRAN_AMT IN NUMBER,
                                   P_NARR1 IN VARCHAR2, 
                                   P_NARR2 IN VARCHAR2,
                                   P_NARR3 IN VARCHAR2) IS

  BEGIN

    W_POST_ARRAY_INDEX := W_POST_ARRAY_INDEX + 1;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_BRN_CODE := P_BRN_CODE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_DATE_OF_TRAN := W_CURRENT_DATE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_GLACC_CODE := P_CREDIT_GL;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_DB_CR_FLG := P_DEBIT_CREDIT;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_CURR_CODE := 'BDT';
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_AMOUNT := P_TRAN_AMT;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_VALUE_DATE := W_CURRENT_DATE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL1 := P_NARR1;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL2 := P_NARR2;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL3 := P_NARR3;

  EXCEPTION
    WHEN OTHERS THEN
      W_ERROR := 'ERROR IN MOVE_TO_TRANREC_CREDIT ' || '-' ||
                 SUBSTR(SQLERRM, 1, 500);
      RAISE V_USER_EXCEPTION;
  END MOVE_TO_TRANREC_GL;
  
  PROCEDURE INITILIZE_TRANSACTION IS
  BEGIN

  PKG_AUTOPOST.pv_userid                       := NVL(P_USER_ID,'INTELECT');
  PKG_AUTOPOST.PV_BOPAUTHQ_REQ                 := false;
  PKG_AUTOPOST.PV_AUTH_DTLS_UPDATE_REQ         := false;
  PKG_AUTOPOST.PV_CALLED_BY_EOD_SOD            := 0;
  PKG_AUTOPOST.PV_EXCEP_CHECK_NOT_REQD         := false;
  PKG_AUTOPOST.PV_OVERDRAFT_CHK_REQD           := false;
  PKG_AUTOPOST.PV_ALLOW_ZERO_TRANAMT           := false;
  PKG_PROCESS_BOPAUTHQ.V_BOPAUTHQ_UPD          := false;
  PKG_AUTOPOST.pv_cancel_flag                  := false;
  PKG_AUTOPOST.pv_post_as_unauth_mod           := false;
  PKG_AUTOPOST.pv_clg_batch_closure            := false;
  PKG_AUTOPOST.pv_authorized_record_cancel     := false;
  PKG_AUTOPOST.PV_BACKDATED_TRAN_REQUIRED      := 0;
  PKG_AUTOPOST.PV_CLG_REGN_POSTING             := false;
  PKG_AUTOPOST.pv_fresh_batch_sl               := false;
  PKG_AUTOPOST.pv_tran_key.Tran_Brn_Code       := P_BRN_CODE ;
  PKG_AUTOPOST.pv_tran_key.Tran_Date_Of_Tran   := W_CURRENT_DATE;
  PKG_AUTOPOST.pv_tran_key.Tran_Batch_Number   := 0;
  PKG_AUTOPOST.pv_tran_key.Tran_Batch_Sl_Num   := 0;
  PKG_AUTOPOST.PV_AUTO_AUTHORISE               := true;
  PKG_PB_GLOBAL.G_TERMINAL_ID                  :=  '10.10.7.149';
  PKG_POST_INTERFACE.G_BATCH_NUMBER_UPDATE_REQ := false;
  PKG_POST_INTERFACE.G_SRC_TABLE_AUTH_REJ_REQ  := false;
  PKG_AUTOPOST.PV_TRAN_ONLY_UNDO               := false;
  PKG_AUTOPOST.PV_OCLG_POSTING_FLG             := false;
  PKG_POST_INTERFACE.G_IBR_REQUIRED            := 0;
  -- PKG_PB_test.G_FORM_NAME                             := 'ETRAN';
  PKG_POST_INTERFACE.G_PGM_NAME := 'ETRAN';
  PKG_AUTOPOST.PV_USER_ROLE_CODE := '';
  PKG_AUTOPOST.PV_SUPP_TRAN_POST := FALSE;
  PKG_AUTOPOST.PV_FUTURE_TRANSACTION_ALLOWED := FALSE;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_BRN_CODE := P_BRN_CODE;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_DATE_OF_TRAN := W_CURRENT_DATE;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_BATCH_NUMBER := 0;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_ENTRY_BRN_CODE := P_BRN_CODE;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_WITHDRAW_SLIP := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_TOKEN_ISSUED := 0;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_BACKOFF_SYS_CODE := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_DEVICE_CODE := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_DEVICE_UNIT_NUM := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_CHANNEL_DT_TIME := NULL;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_CHANNEL_UNIQ_NUM := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_COST_CNTR_CODE := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SUB_COST_CNTR := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_PROFIT_CNTR_CODE := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SUB_PROFIT_CNTR := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_NUM_TRANS := V_NUMBER_OF_TRAN;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_BASE_CURR_TOT_CR := 0.0;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_BASE_CURR_TOT_DB := 0.0;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_CANCEL_BY := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_CANCEL_ON := NULL;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_CANCEL_REM1 := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_CANCEL_REM2 := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_CANCEL_REM3 := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SOURCE_TABLE := 'TRAN';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SOURCE_KEY := P_BRN_CODE||W_CURRENT_DATE||'|0';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_NARR_DTL1 :=NULL;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_NARR_DTL2 := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_NARR_DTL3 := '';
  PKG_AUTOPOST.pv_tranbat. TRANBAT_AUTH_BY :=P_USER_ID;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_AUTH_ON := NULL;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SHIFT_TO_TRAN_DATE := NULL;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SHIFT_TO_BAT_NUM := 0;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SHIFT_FROM_TRAN_DATE := NULL;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_SHIFT_FROM_BAT_NUM := 0;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_REV_TO_TRAN_DATE := NULL;
  PKG_AUTOPOST.pv_tranbat. TRANBAT_REV_TO_BAT_NUM := 0;
  PKG_AUTOPOST.PV_TRANBAT. TRANBAT_REV_FROM_TRAN_DATE := NULL;
  PKG_AUTOPOST.PV_TRANBAT. TRANBAT_REV_FROM_BAT_NUM := 0;

  END;

  ---------------------------------------------------------------------------------------------------------
  PROCEDURE MOVE_TO_TRANREC_ACC(P_AC_NUM IN NUMBER, P_DEBIT_CREDIT VARCHAR2,
                                  P_CONT_NUM IN NUMBER,
                                  P_TRAN_AMT IN NUMBER, 
                                  W_CURRENT_DATE IN DATE,
                                  P_NARR1 IN VARCHAR2, 
                                  P_NARR2 IN VARCHAR2,
                                  P_NARR3 IN VARCHAR2) IS

 BEGIN

    --DEBIT/CREDIT ACCOUNT

    W_POST_ARRAY_INDEX := W_POST_ARRAY_INDEX + 1;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_DATE_OF_TRAN := W_CURRENT_DATE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_INTERNAL_ACNUM := P_AC_NUM;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_CONTRACT_NUM := P_CONT_NUM;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_DB_CR_FLG := P_DEBIT_CREDIT;

   IF LOANACNT <> 0 THEN
        PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_AMT_BRKUP := '1';
        IDX1 := IDX1 + 1;
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_BATCH_SL_NUM := W_POST_ARRAY_INDEX;
        IF V_LOAN_TRAN_ACTION='P' THEN 
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_PRIN_AC_AMT := P_TRAN_AMT;
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_INTRD_AC_AMT := 0;
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_CHARGE_AC_AMT := 0;
        END IF;

        IF V_LOAN_TRAN_ACTION='I' THEN 
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_PRIN_AC_AMT := 0;
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_INTRD_AC_AMT := P_TRAN_AMT;
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_CHARGE_AC_AMT := 0;
        END IF;

        IF V_LOAN_TRAN_ACTION='C' THEN 
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_PRIN_AC_AMT := 0;
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_INTRD_AC_AMT := 0;
        PKG_AUTOPOST.PV_TRAN_ADV_REC(IDX1).TRANADV_CHARGE_AC_AMT := P_TRAN_AMT;
        END IF;
        
   END IF;

    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_CURR_CODE := 'BDT';
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_AMOUNT := P_TRAN_AMT;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_VALUE_DATE := W_CURRENT_DATE;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL1 := P_NARR1;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL2 := P_NARR2;
    PKG_AUTOPOST.PV_TRAN_REC(W_POST_ARRAY_INDEX).TRAN_NARR_DTL3 := P_NARR3;

  EXCEPTION
    WHEN OTHERS THEN
      W_ERROR := 'ERROR IN MOVE_TO_TRANREC_DEBIT ' || '-' ||
                 SUBSTR(SQLERRM, 1, 500);
      RAISE V_USER_EXCEPTION;
  END MOVE_TO_TRANREC_ACC;

  PROCEDURE SET_TRAN_KEY_VALUES(P_BRN_CODE IN NUMBER) IS
  BEGIN
    PKG_AUTOPOST.PV_SYSTEM_POSTED_TRANSACTION  := TRUE;
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BRN_CODE     := P_BRN_CODE;
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_DATE_OF_TRAN := W_CURRENT_DATE;
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_NUMBER := 0;
    PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_SL_NUM := 0;
  EXCEPTION
    WHEN OTHERS THEN
      W_ERROR := 'ERROR IN SET_TRAN_KEY_VALUES ' || '-' ||
                 SUBSTR(SQLERRM, 1, 500);
      RAISE V_USER_EXCEPTION;
  END SET_TRAN_KEY_VALUES;
  ------------------------------------------------------------------------------------------------------
  PROCEDURE SET_TRANBAT_VALUES(P_BRN_CODE IN NUMBER) IS
  BEGIN
    PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_TABLE := 'TRAN';
    PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_KEY   := P_BRN_CODE;
    PKG_AUTOPOST.PV_TRANBAT.TRANBAT_NARR_DTL1    := NULL;

  EXCEPTION
    WHEN OTHERS THEN
      W_ERROR := 'ERROR IN SET_TRANBAT_VALUES ' || P_BRN_CODE ||
                 SUBSTR(SQLERRM, 1, 500);
      RAISE V_USER_EXCEPTION;
  END SET_TRANBAT_VALUES;

  ---------------------------------------------------------------------------------------------------------
  PROCEDURE POST_TRANSACTION IS
  BEGIN

  --PKG_PB_AUTOPOST.G_FORM_NAME := 'AUTORENEWAL';
  PKG_PB_AUTOPOST.G_FORM_NAME := 'ETRAN';

-- Calling AUTOPOST --
  PKG_POST_INTERFACE.SP_AUTOPOSTTRAN('1', --Entity Number
                                     'A', --User Mode
                                     V_NUMBER_OF_TRAN,   --No of transactions
                                     0,
                                     0,
                                     0,
                                     0,
                                     'N',
                                     W_ERR_CODE,
                                     W_ERROR,
                                     W_BATCH_NUM);

    IF (W_ERROR_CODE <> '0000') THEN
      W_ERROR := 'ERROR IN POST_TRANSACTION ' ||
                 FN_GET_AUTOPOST_ERR_MSG(P_ENTITY_CODE);
      RAISE V_USER_EXCEPTION;
    END IF;

  END POST_TRANSACTION;
  ---------------------------------------------------------------------------------------------------------
  PROCEDURE AUTOPOST_ENTRIES IS
  BEGIN

    IF W_POST_ARRAY_INDEX > 0 THEN
      POST_TRANSACTION;
    END IF;

    W_POST_ARRAY_INDEX := 0;
    IDX1 := 0; 
  END AUTOPOST_ENTRIES;
  ---------------------------------------------------------------------------------------------------------

BEGIN

  SELECT M.MN_CURR_BUSINESS_DATE INTO W_CURRENT_DATE FROM MAINCONT M;
  
  BEGIN
    ----- FOR VOUTER POSTING 
    FOR DIST_BATCH IN (SELECT DISTINCT VOUTURE_NUMBER FROM MANUAL_TRAN_SIN_MULTI WHERE BRANCH_CODE= P_BRN_CODE  AND BATCH_NUMBER IS NULL ORDER BY VOUTURE_NUMBER) LOOP
        V_NUMBER_OF_TRAN:=0;
        V_VOUTURE_NUMBER:=DIST_BATCH.VOUTURE_NUMBER;
        BEGIN
            SELECT COUNT(*)  INTO V_NUMBER_OF_TRAN FROM MANUAL_TRAN_SIN_MULTI WHERE BRANCH_CODE= P_BRN_CODE  AND VOUTURE_NUMBER=DIST_BATCH.VOUTURE_NUMBER AND BATCH_NUMBER IS NULL;
        END ;

        INITILIZE_TRANSACTION;
     ----- FOR VOUTURE DETAIL LAGE GENERATE 
        FOR VOUTURE IN (SELECT * FROM MANUAL_TRAN_SIN_MULTI WHERE BRANCH_CODE= P_BRN_CODE  AND VOUTURE_NUMBER=DIST_BATCH.VOUTURE_NUMBER AND BATCH_NUMBER IS NULL) LOOP

            LOANACNT:=0;
            V_CONTRACT_NUMBER:=0;
            V_LOAN_TRAN_ACTION:=VOUTURE.LOAN_TRAN_ACTION;
            
           IF VOUTURE.PRODUCT_TYPE='L' THEN
                LOANACNT:=1;
           END IF;
           
           IF VOUTURE.DEBIT_AC_NUMBER>0 AND VOUTURE.CREDIT_AC_NUMBER=0 AND VOUTURE.DEBIT_GL_NUMBER='0' AND VOUTURE.CREDIT_GL_NUMBER='0'  THEN
           ----- for contract based account 
            IF VOUTURE.PRODUCT_TYPE='C' THEN
                 BEGIN
                    SELECT PBDCONT_CONT_NUM 
                    INTO V_CONTRACT_NUMBER
                    FROM PBDCONTRACT
                     WHERE PBDCONT_ENTITY_NUM = P_ENTITY_CODE
                      AND PBDCONT_DEP_AC_NUM = VOUTURE.DEBIT_AC_NUMBER
                      AND PBDCONT_DEP_CURR = 'BDT'
                      AND  PBDCONT_CLOSURE_DATE IS NULL;

                    EXCEPTION
                            WHEN OTHERS THEN 
                            V_CONTRACT_NUMBER:=0;
                    END;
             END IF;   
                  BEGIN
                        MOVE_TO_TRANREC_ACC(VOUTURE.DEBIT_AC_NUMBER,'D',
                                              V_CONTRACT_NUMBER,
                                              VOUTURE.DEBIT_AMOUNT, 
                                              W_CURRENT_DATE, 
                                              VOUTURE.NARATION,
                                              NULL, 
                                              NULL);
                  END;
           END IF;
           
           IF  VOUTURE.DEBIT_AC_NUMBER=0 AND VOUTURE.CREDIT_AC_NUMBER>0 AND VOUTURE.DEBIT_GL_NUMBER='0' AND VOUTURE.CREDIT_GL_NUMBER='0'  THEN
           ----- for contract based account 
            IF VOUTURE.PRODUCT_TYPE='C' THEN
                 BEGIN
                    SELECT PBDCONT_CONT_NUM 
                    INTO V_CONTRACT_NUMBER
                    FROM PBDCONTRACT
                     WHERE PBDCONT_ENTITY_NUM = P_ENTITY_CODE
                      AND PBDCONT_DEP_AC_NUM = VOUTURE.CREDIT_AC_NUMBER
                      AND PBDCONT_DEP_CURR = 'BDT'
                      AND  PBDCONT_CLOSURE_DATE IS NULL;

                    EXCEPTION
                            WHEN OTHERS THEN 
                            V_CONTRACT_NUMBER:=0;
                    END;
             END IF; 
                        MOVE_TO_TRANREC_ACC(VOUTURE.CREDIT_AC_NUMBER,'C',
                                              V_CONTRACT_NUMBER,
                                              VOUTURE.CREDIT_AMOUNT, 
                                              W_CURRENT_DATE, 
                                              VOUTURE.NARATION,
                                              NULL, 
                                              NULL);
           END IF;
           
           IF VOUTURE.CREDIT_AC_NUMBER=0 AND VOUTURE.DEBIT_AC_NUMBER=0 AND VOUTURE.DEBIT_GL_NUMBER='0' AND VOUTURE.CREDIT_GL_NUMBER<>'0' THEN

                  BEGIN
                      MOVE_TO_TRANREC_GL(P_BRN_CODE,
                                             'C',
                                             VOUTURE.CREDIT_GL_NUMBER,
                                             VOUTURE.CREDIT_AMOUNT, 
                                             VOUTURE.NARATION,
                                             NULL, 
                                             NULL);
                  END;
           END IF;

           IF VOUTURE.CREDIT_AC_NUMBER=0 AND VOUTURE.DEBIT_AC_NUMBER=0 AND VOUTURE.DEBIT_GL_NUMBER<>'0' AND VOUTURE.CREDIT_GL_NUMBER='0' THEN

                  BEGIN
                      MOVE_TO_TRANREC_GL(P_BRN_CODE, 'D',
                                             VOUTURE.DEBIT_GL_NUMBER,
                                             VOUTURE.DEBIT_AMOUNT, 
                                             VOUTURE.NARATION,
                                             NULL, 
                                             NULL);
                  END;
           END IF;
        END LOOP;

          BEGIN

            SET_TRAN_KEY_VALUES(P_BRN_CODE);
            SET_TRANBAT_VALUES(P_BRN_CODE);
            V_NARR1 := NULL;
            V_NARR2 := NULL;
            V_NARR3 := NULL;
            AUTOPOST_ENTRIES;
            
            BEGIN
            UPDATE MANUAL_TRAN_SIN_MULTI
            SET BATCH_NUMBER=W_BATCH_NUM
            WHERE VOUTURE_NUMBER=V_VOUTURE_NUMBER
            AND BRANCH_CODE=P_BRN_CODE;
            END ;
            W_POST_ARRAY_INDEX:=0;
            IDX1:=0;
            PKG_AUTOPOST.PV_TRAN_REC.DELETE;
            EXCEPTION 
                    WHEN OTHERS THEN 
                    RAISE_APPLICATION_ERROR(-20100,'ERROR AUTOPOST '||W_ERROR);
          END;
    END LOOP;

END;

END;
/


/*<TOAD_FILE_CHUNK>*/
--------- Execution Scripts. ------------

BEGIN
FOR I IN (SELECT DISTINCT BRANCH_CODE FROM MANUAL_TRAN_SIN_MULTI WHERE BATCH_NUMBER IS NULL ORDER BY BRANCH_CODE) LOOP
SP_AUTOPOST_TRAN(P_ENTITY_CODE =>1,
                 P_BRN_CODE =>I.BRANCH_CODE,
                 P_USER_ID =>'INTELECT'
                );
END LOOP;
END;